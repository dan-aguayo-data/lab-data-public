{{
    config(
        materialized='incremental',
        incremental_strategy='merge',
        unique_key='EVENT_ID',
        on_schema_change='append_new_columns',
        post_hook="""
            DELETE FROM {{this}}
            WHERE EVENT_ID IN (
                SELECT E.EVENT_ID
                FROM {{this}} E
                WHERE 
                    (DATEADD(DAY, 14, E.COMPLETED_DATE) < SYSDATE()) 
                    OR (E.COMPLETED_DATE IS NULL 
                        AND DATEADD(DAY, 15, CONVERT_TIMEZONE('UTC', 'Australia/Melbourne', E.UPDATED_ON_UTC)) < SYSDATE())
            );
        """
    )
}}

WITH ORDER_STATUS AS (
    SELECT * FROM {{ ref('ORDER_STATUS') }}
), VENDOR_CONTACTS_EMAIL AS (
    SELECT
        C.GIVEN_NAME,
        C.FAMILY_NAME,
        LOWER(C.EMAIL) AS EMAIL,
        C.UPDATED_ON
    FROM {{ source('DATA_HUB', 'VENDOR_CONTACTS') }} C
    WHERE IS_ACTIVE = 1
    QUALIFY ROW_NUMBER() OVER (PARTITION BY LOWER(C.EMAIL) ORDER BY C.UPDATED_ON DESC) = 1
), TRANSACTION_RECORDS_REF AS (
    SELECT
        T.ORDER_TXN_ID,
        T.ORDER_REF_CODE,
        T.TXN_CODE,
        T.UPDATED_ON
    FROM {{ source('DATA_HUB', 'ORDER_TRANSACTIONS') }} AS T
    QUALIFY RANK() OVER (PARTITION BY T.TXN_CODE ORDER BY T.ORDER_TXN_ID DESC) = 1
)
{% if is_incremental() %}
, INCREMENTAL_DATE_REF AS (
    SELECT DATEADD(HOUR, {{var('delta_load_hours')}}, SYSDATE()) AS INCREMENTAL_DELTA
), INCREMENTAL_RECORDS_TABLE AS (
    SELECT
        E.ORDER_ID
    FROM {{ source('DATA_HUB_STREAM', 'ORDER_EVENT') }} E
    LEFT JOIN {{ source('DATA_HUB_STREAM', 'ORDER_EVENT_VALUE') }} AS VAL
        ON E.ORDER_ID = VAL.ORDER_ID AND VAL.STREAM_TIMESTAMP >= (SELECT INCREMENTAL_DELTA FROM INCREMENTAL_DATE_REF)
    LEFT JOIN {{ source('DATA_HUB_STREAM', 'ORDER_EVENT_ITEMS') }} AS ITM
        ON E.TXN_ID = ITM.TXN_ID AND ITM.STREAM_TIMESTAMP >= (SELECT INCREMENTAL_DELTA FROM INCREMENTAL_DATE_REF)
    LEFT JOIN {{ source('DATA_HUB', 'VENDOR_LOCATIONS') }} LOC_C
        ON E.CLIENT_ID = LOC_C.LOCATION_CODE
    LEFT JOIN {{ source('DATA_HUB', 'VENDOR_LOCATIONS') }} LOC_DEP
        ON E.DEPOT_CODE = LOC_DEP.LOCATION_CODE
    LEFT JOIN VENDOR_CONTACTS_EMAIL VC
        ON LOWER(LOC_DEP.CONTACT_EMAIL) = VC.EMAIL
    LEFT JOIN TRANSACTION_RECORDS_REF TR
        ON E.TXN_ID = TR.TXN_CODE
    LEFT JOIN {{ ref('TXN_VALUE') }} AS TXN
        ON TO_CHAR(TR.ORDER_TXN_ID) = TO_CHAR(TXN.ID)
        AND TXN.ID_TYPE = 'ORDER_TXN_ID'
        AND TXN.UPDATED_ON_UTC >= (SELECT INCREMENTAL_DELTA FROM INCREMENTAL_DATE_REF)
    LEFT JOIN ORDER_STATUS AS ORD
        ON TO_CHAR(TR.ORDER_TXN_ID) = TO_CHAR(ORD.ID)
        AND ORD.ID_TYPE = 'ORDER_TXN_ID'
        AND ORD.COMPLETED_DATE >= (SELECT INCREMENTAL_DELTA FROM INCREMENTAL_DATE_REF)
    LEFT JOIN {{ ref('TXN_VALUE') }} AS TXN_POS
        ON TO_CHAR(E.TXN_ID) = TO_CHAR(TXN_POS.ID)
        AND TXN_POS.ID_TYPE = 'TXN_CODE'
        AND TXN_POS.UPDATED_ON_UTC >= (SELECT INCREMENTAL_DELTA FROM INCREMENTAL_DATE_REF)
    WHERE (
        E.STREAM_TIMESTAMP >= (SELECT INCREMENTAL_DELTA FROM INCREMENTAL_DATE_REF)
        OR LOC_C.UPDATED_ON >= (SELECT INCREMENTAL_DELTA FROM INCREMENTAL_DATE_REF)
        OR LOC_DEP.UPDATED_ON >= (SELECT INCREMENTAL_DELTA FROM INCREMENTAL_DATE_REF)
        OR VC.UPDATED_ON >= (SELECT INCREMENTAL_DELTA FROM INCREMENTAL_DATE_REF)
        OR TR.UPDATED_ON >= (SELECT INCREMENTAL_DELTA FROM INCREMENTAL_DATE_REF)
        OR VAL.STREAM_TIMESTAMP >= (SELECT INCREMENTAL_DELTA FROM INCREMENTAL_DATE_REF)
        OR ITM.STREAM_TIMESTAMP >= (SELECT INCREMENTAL_DELTA FROM INCREMENTAL_DATE_REF)
        OR TXN_POS.UPDATED_ON_UTC >= (SELECT INCREMENTAL_DELTA FROM INCREMENTAL_DATE_REF)
        OR TXN.UPDATED_ON_UTC >= (SELECT INCREMENTAL_DELTA FROM INCREMENTAL_DATE_REF)
        OR ORD.UPDATED_ON_UTC >= (SELECT INCREMENTAL_DELTA FROM INCREMENTAL_DATE_REF)
        OR ORD.COMPLETED_DATE >= (SELECT INCREMENTAL_DELTA FROM INCREMENTAL_DATE_REF)
    )
    AND E.STREAM_TIMESTAMP >= CONVERT_TIMEZONE('Australia/Melbourne', 'UTC', TO_TIMESTAMP('2023-10-01 00:00:00'))
    AND E.PAYMENT_TYPE <> 'DIRECT'
    GROUP BY E.ORDER_ID
), FIN_STREAM AS (
{% endif %}
SELECT
    E.PROGRAM_CODE AS PROGRAM_CODE,
    PROGRAM.TITLE AS PROGRAM,
    E.STREAM_ID AS ID,
    E.TXN_ID AS TXN_CODE,
    VAL.ID AS EVENT_ID,
    E.ORDER_ID AS ORDER_ID,
    E.TXN_TYPE AS TXN_TYPE,
    E.PAYMENT_TYPE AS PAYMENT_TYPE,
    E.CLIENT_ID AS CLIENT_ID,
    LOC_C.LOCATION_NAME AS CLIENT_NAME,
    E.VENDOR_CODE AS VENDOR_CODE,
    NVL(E.VENDOR_LOCATION_CODE, E.VENDOR_CODE) AS VENDOR_LOCATION_CODE,
    LOC_V.LOCATION_NAME AS VENDOR_NAME,
    E.VENDOR_TYPE AS VENDOR_TYPE,
    E.DEPOT_CODE AS DEPOT_CODE,
    LOC_DEP.LOCATION_NAME AS DEPOT_NAME,
    VC.GIVEN_NAME || ' ' || VC.FAMILY_NAME AS DEPOT_MANAGER_NAME,
    LOC_DEP.CONTACT_EMAIL AS EMAIL,
    LOC_DEP.NOTIFICATION_EMAIL AS NOTIFICATION_EMAIL,
    NVL(VAL.ITEM_CATEGORY_ID, ITM.ITEM_CATEGORY_ID) AS ITEM_CATEGORY_ID,
{% if not is_incremental() %}
    ROW_NUMBER() OVER (PARTITION BY E.STREAM_ID ORDER BY VAL.ID) AS LINE_NUM,
{% endif %}
    CONVERT_TIMEZONE('UTC', PROGRAM.REGION, E.TXN_DATE) AS ORDER_PERIOD,
    E.STREAM_TIMESTAMP AS PERIOD,
    VAL.TXN_VALUE AS TXN_VALUE,
    ITM.ITEM_QUANTITY AS QUANTITY,
    ITM.TOTAL_VALUE AS TOTAL_VALUE,
    CASE WHEN ORD.CANCELLED = 'CANCELLED' THEN 'CANCELLED' ELSE 'ACTIVE' END AS CANCEL_STATUS,
    E.ORDER_REF_CODE AS ORDER_REF_CODE,
    CASE WHEN ORD.COMPLETED = 'COMPLETED' THEN 'Y' ELSE 'N' END AS COMPLETED,
    CASE WHEN NVL(ORD.BILLED, POS_STATUS.BILLED) = 'BILLED' THEN 'Y' ELSE 'N' END AS BILLED,
    CASE WHEN NVL(ORD.SYS_PAYMENT_COMPLETE, POS_STATUS.SYS_PAYMENT_COMPLETE) = 'SYS_PAYMENT_COMPLETED' THEN 'Y' ELSE 'N' END AS SYS_PAID,
    E.TOTAL_TXN_VALUE AS ORDER_VALUE,
{% if not is_incremental() %}
    SUM(VAL.TXN_VALUE) OVER (PARTITION BY E.ORDER_ID) AS ORDER_LINE_AGG,
{% endif %}
{% if is_incremental() %}
    E.UPDATED_BY,
    PROGRAM.REGION,
    E.STREAM_TIMESTAMP,
    CONVERT_TIMEZONE('UTC', 'Australia/Melbourne', E.STREAM_TIMESTAMP) AS STREAM_TIMESTAMP_MEL,
{% else %}
    FIRST_VALUE(E.UPDATED_BY) OVER (PARTITION BY E.ORDER_ID ORDER BY E.STREAM_TIMESTAMP) AS CREATED_BY,
    CONVERT_TIMEZONE('UTC', PROGRAM.REGION, MIN(E.STREAM_TIMESTAMP) OVER (PARTITION BY E.ORDER_ID)) AS CREATED_ON,
    MIN(E.STREAM_TIMESTAMP) OVER (PARTITION BY E.ORDER_ID) AS CREATED_ON_UTC,
    LAST_VALUE(E.UPDATED_BY) OVER (PARTITION BY E.ORDER_ID ORDER BY E.STREAM_TIMESTAMP) AS LAST_MODIFIED_BY,
    MAX(E.STREAM_TIMESTAMP) OVER (PARTITION BY E.ORDER_ID) AS LAST_MODIFIED_ON_UTC,
{% endif %}
    CASE WHEN E.STATE IN ('CONFIRMED', 'COMPLETED') THEN 'Y' ELSE 'N' END AS CONFIRMATION_FLAG,
    E.VALIDATED AS RULES_VALIDATED,
    E.BATCH_STATUS AS BATCH_STATUS,
    CONVERT_TIMEZONE('UTC', PROGRAM.REGION, E.ORDERS_CREATED_ON_AND_BEFORE) AS BATCH_CREATED_ON,
    E.CURRENT_ORDER AS CURRENT_ORDER,
    TO_CHAR(CONVERT_TIMEZONE('UTC', PROGRAM.REGION, E.ORDERS_CREATED_ON_AND_BEFORE), 'YYYY-MM-DD') || ' (' || E.CURRENT_ORDER || ')' AS BATCH_ON_PORTAL,
{% if is_incremental() %}
    E.BATCH_ID,
{% else %}
    CASE WHEN TO_CHAR(CONVERT_TIMEZONE('UTC', 'Australia/Melbourne', MIN(E.STREAM_TIMESTAMP) OVER (PARTITION BY E.ORDER_ID)), 'YYYYMMDDHH') >= TO_CHAR(CONVERT_TIMEZONE('UTC', 'Australia/Melbourne', SYSDATE()), 'YYYYMMDD') || '04' AND E.BATCH_ID IS NULL THEN 1 ELSE 0 END AS TODAY_NEW_ORDER_FLAG,
{% endif %}
    CONVERT_TIMEZONE('UTC', PROGRAM.REGION, CAST(ORD.COMPLETED_DATE AS TIMESTAMP)) AS COMPLETED_DATE,
    TO_CHAR(CONVERT_TIMEZONE('UTC', PROGRAM.REGION, CAST(ORD.COMPLETED_DATE AS TIMESTAMP)), 'YYYYMMDD') AS COMPLETED_DATE_KEY,
    ORD.CANCELLED AS CANCELLED,
    CONVERT_TIMEZONE('UTC', PROGRAM.REGION, CAST(ORD.CANCELLED_DATE AS TIMESTAMP)) AS CANCELLED_DATE,
    COALESCE(ORD.COMPLETED, ORD.PROCESSING_ERROR, 'NOT_COMPLETED') AS ORDER_STATUS,
    CASE WHEN E.STATE = 'COMPLETED' THEN NULL ELSE E.STATE END AS CONFIRMATION_STATUS,
    COALESCE(ORD.BILLED, ORD.ERROR_BILL_SYS, POS_STATUS.BILLED, 'NOT_BILLED') AS PROCESS_STATUS,
    E.BATCH_ID AS ALERT_ID,
    COALESCE(ORD.SYS_PAYMENT_COMPLETE, ORD.ERROR_PAY_SYS, ORD.NO_VALID_SYS_ACCT, POS_STATUS.SYS_PAYMENT_COMPLETE, 'NO_SYS_PAYMENT') AS SYS_PAYMENT_STATUS,
    COALESCE(TXN.BILL_AMOUNT, TXN_POS.BILL_AMOUNT) AS BILL_AMOUNT,
    COALESCE(TXN.BILL_NUMBER_AND_STATUS, TXN_POS.BILL_NUMBER_AND_STATUS) AS BILL_NUMBER_AND_STATUS,
    NVL2(E.BATCH_ID, 'Y', 'N') AS ALERT_ID_ASSIGNED_FLAG,
    'Number of Orders' AS NUMBER_OF_ORDERS_HEADER,
    SYSDATE() AS LOAD_DATE_UTC,




FROM
    {{ source('DATA_HUB_STREAM', 'ORDER_EVENT') }} AS E
    LEFT JOIN {{ source('DATA_HUB_STREAM', 'ORDER_EVENT_VALUE') }} AS VAL
        ON E.ORDER_ID = VAL.ORDER_ID
    LEFT JOIN {{ source('DATA_HUB_STREAM', 'ORDER_EVENT_ITEMS') }} AS ITM
        ON E.TXN_ID = ITM.TXN_ID
    LEFT JOIN {{ source('DATA_HUB', 'VENDOR_LOCATIONS') }} AS LOC_C
        ON E.CLIENT_ID = LOC_C.LOCATION_CODE
    LEFT JOIN {{ source('DATA_HUB', 'VENDOR_LOCATIONS') }} AS LOC_V
        ON NVL(E.VENDOR_LOCATION_CODE, E.VENDOR_CODE) = LOC_V.LOCATION_CODE
    LEFT JOIN {{ source('DATA_HUB', 'VENDOR_LOCATIONS') }} AS LOC_DEP
        ON E.DEPOT_CODE = LOC_DEP.LOCATION_CODE
    LEFT JOIN VENDOR_CONTACTS_EMAIL VC
        ON LOWER(LOC_DEP.CONTACT_EMAIL) = VC.EMAIL
    LEFT JOIN TRANSACTION_RECORDS_REF TR
        ON E.TXN_ID = TR.TXN_CODE
    LEFT JOIN ORDER_STATUS AS ORD
        ON TO_CHAR(TR.ORDER_TXN_ID) = TO_CHAR(ORD.ID)
        AND ORD.ID_TYPE = 'ORDER_TXN_ID'
    LEFT JOIN ORDER_STATUS AS POS_STATUS
        ON TO_CHAR(E.TXN_ID) = TO_CHAR(POS_STATUS.ID)
        AND POS_STATUS.ID_TYPE = 'TXN_CODE'
    LEFT JOIN {{ ref('TXN_VALUE') }} AS TXN
        ON TO_CHAR(TR.ORDER_TXN_ID) = TO_CHAR(TXN.ID)
        AND TXN.ID_TYPE = 'ORDER_TXN_ID'
    LEFT JOIN {{ ref('TXN_VALUE') }} AS TXN_POS
        ON TO_CHAR(E.TXN_ID) = TO_CHAR(TXN_POS.ID)
        AND TXN_POS.ID_TYPE = 'TXN_CODE'
    INNER JOIN {{ source('DATA_HUB', 'PROGRAM') }} AS PROGRAM
        ON E.PROGRAM_CODE = PROGRAM.PROGRAM_CODE
{% if is_incremental() %}
    INNER JOIN INCREMENTAL_RECORDS_TABLE IT
        ON E.ORDER_ID = IT.ORDER_ID
{% endif %}
WHERE 1 = 1
    AND (
        VAL.ITEM_CATEGORY_ID = ITM.ITEM_CATEGORY_ID
        OR VAL.ITEM_CATEGORY_ID IS NULL
        OR ITM.ITEM_CATEGORY_ID IS NULL
    )
{% if not is_incremental() %}
    AND TO_CHAR(CONVERT_TIMEZONE('UTC', 'Australia/Melbourne', E.STREAM_TIMESTAMP), 'YYYYMMDD') >= '20231001'
    AND E.PAYMENT_TYPE <> 'DIRECT'
    AND (DATEADD(DAY, 14, CONVERT_TIMEZONE('UTC', PROGRAM.REGION, CAST(ORD.COMPLETED_DATE AS TIMESTAMP))) >= SYSDATE()
        OR (ORD.COMPLETED_DATE IS NULL AND DATEADD(DAY, 15, CONVERT_TIMEZONE('UTC', 'Australia/Melbourne', E.STREAM_TIMESTAMP)) >= SYSDATE())
    )
    QUALIFY ORDER_VALUE_RECENT_FLAG = 1
{% endif %}
{% if is_incremental() %}
), AGG_QUERY AS (
    SELECT
        E.PROGRAM_CODE,
        E.PROGRAM,
        E.ID,
        E.STREAM_ID,
        E.TXN_CODE,
        E.EVENT_ID,
        E.ORDER_ID,
        E.TXN_TYPE,
        E.PAYMENT_TYPE,
        E.CLIENT_ID,
        E.CLIENT_NAME,
        E.VENDOR_CODE,
        E.VENDOR_LOCATION_CODE,
        E.VENDOR_NAME,
        E.VENDOR_TYPE,
        E.DEPOT_CODE,
        E.DEPOT_NAME,
        E.DEPOT_MANAGER_NAME,
        E.EMAIL,
        E.NOTIFICATION_EMAIL,
        E.ITEM_CATEGORY_ID,
        E.ORDER_PERIOD,
        E.PERIOD,
        E.TXN_VALUE,
        E.QUANTITY,
        E.TOTAL_VALUE,
        E.CANCEL_STATUS,
        E.ORDER_REF_CODE,
        E.COMPLETED,
        E.BILLED,
        E.SYS_PAID,
        E.ORDER_VALUE,
        SUM(E.TXN_VALUE) OVER (PARTITION BY E.ORDER_ID) AS ORDER_LINE_AGG,
        FIRST_VALUE(E.UPDATED_BY) OVER (PARTITION BY E.ORDER_ID ORDER BY E.STREAM_TIMESTAMP) AS CREATED_BY,
        CONVERT_TIMEZONE('UTC', E.REGION, MIN(E.STREAM_TIMESTAMP) OVER (PARTITION BY E.ORDER_ID)) AS CREATED_ON,
        MIN(E.STREAM_TIMESTAMP) OVER (PARTITION BY E.ORDER_ID) AS CREATED_ON_UTC,
        LAST_VALUE(E.UPDATED_BY) OVER (PARTITION BY E.ORDER_ID ORDER BY E.STREAM_TIMESTAMP) AS LAST_MODIFIED_BY,
        MAX(E.STREAM_TIMESTAMP) OVER (PARTITION BY E.ORDER_ID) AS LAST_MODIFIED_ON_UTC,
        E.CONFIRMATION_FLAG,
        E.RULES_VALIDATED,
        E.BATCH_STATUS,
        E.BATCH_CREATED_ON,
        E.CURRENT_ORDER,
        E.BATCH_ON_PORTAL,
        E.COMPLETED_DATE,
        E.COMPLETED_DATE_KEY,
        E.CANCELLED,
        E.CANCELLED_DATE,
        E.ORDER_STATUS,
        E.CONFIRMATION_STATUS,
        E.PROCESS_STATUS,
        E.ALERT_ID,
        E.SYS_PAYMENT_STATUS,
        E.BILL_AMOUNT,
        E.BILL_NUMBER_AND_STATUS,
        E.BILL_STATUS,
        E.ALERT_ID_ASSIGNED_FLAG,
        E.WORKFLOW_STATUS,
        E.SYS_BILL_STATUS_CANCEL,
        E.SYS_PAYMENT_STATUS_CANCEL,
        E.ORDER_STATUS_CANCEL,
        E.TXN_VALUE_HEADER,
        E.TOTAL_VALUE_HEADER,
        E.QUANTITY_HEADER,
        E.NUMBER_OF_ORDERS_HEADER,
        E.LOAD_DATE_UTC
    FROM FIN_STREAM AS E
    WHERE (
        DATEADD(DAY, 14, CAST(E.COMPLETED_DATE AS TIMESTAMP)) >= SYSDATE()
        OR (E.COMPLETED_DATE IS NULL AND DATEADD(DAY, 15, E.STREAM_TIMESTAMP_MEL) >= SYSDATE())
    )
    QUALIFY ORDER_VALUE_RECENT_FLAG = 1
), LINE_NUMBER_QUERY AS (
    SELECT
        EVENT_ID,
        ROW_NUMBER() OVER (PARTITION BY STREAM_ID ORDER BY EVENT_ID) AS LINE_NUM
    FROM AGG_QUERY
)
SELECT
    E.PROGRAM_CODE,
    E.PROGRAM,
    E.ID,
    E.TXN_CODE,
    E.EVENT_ID,
    E.ORDER_ID,
    E.TXN_TYPE,
    E.PAYMENT_TYPE,
    E.CLIENT_ID,
    E.CLIENT_NAME,
    E.VENDOR_CODE,
    E.VENDOR_LOCATION_CODE,
    E.VENDOR_NAME,
    E.VENDOR_TYPE,
    E.DEPOT_CODE,
    E.DEPOT_NAME,
    E.DEPOT_MANAGER_NAME,
    E.EMAIL,
    E.NOTIFICATION_EMAIL,
    E.ITEM_CATEGORY_ID,
    L.LINE_NUM,
    E.ORDER_PERIOD,
    E.PERIOD,
    E.TXN_VALUE,
    E.QUANTITY,
    E.TOTAL_VALUE,
    E.CANCEL_STATUS,
    E.ORDER_REF_CODE,
    E.COMPLETED,
    E.BILLED,
    E.SYS_PAID,
    E.ORDER_VALUE,
    E.ORDER_LINE_AGG,
    E.CREATED_BY,
    E.CREATED_ON,
    E.CREATED_ON_UTC,
    E.LAST_MODIFIED_BY,
    E.LAST_MODIFIED_ON_UTC,
    E.CONFIRMATION_FLAG,
    E.RULES_VALIDATED,
    E.BATCH_STATUS,
    E.BATCH_CREATED_ON
FROM AGG_QUERY E
LEFT JOIN LINE_NUMBER_QUERY L
    ON E.EVENT_ID = L.EVENT_ID
{% endif %}