DROP VIEW IF EXISTS [DWH_OPERATIONS].[V_REP_CurrentTankAnalysis]
GO


 /*
----Creation History-----
Date Created: 26/07/2022
Author: Daniel Aguayo
Project: View of Active non-empty tanks and their respective analysis, analysis reading and blend filtered on AU WIPS tables only.
This View was created for the purpose of feeding the EFERM tool in Nick Bruer's team, replacing the OBIEE View Analysis Report

*/
CREATE VIEW [DWH_OPERATIONS].[V_REP_CurrentTankAnalysis] AS

SELECT

VCW.PLANT_CODE AS "Plant Code"
,VCW.TANK_CODE AS  "Tank Code"
,VCW.BLEND_ID AS "Blend Id"
,VCW.LOT_COMMENT AS "Lot Comment"
,X.ANALYSIS_COMMENT AS "Analysis Comment"
,X.ANALYSIS_DATE AS "Analysis Date"
,X.ANALYSIS_CODE AS "Analysis Code"
,X.ANALYSIS_READING AS "Analysis Reading"
,X.ANALYSIS_METHOD_DESCRIPTION as "Analysis Method Description"

FROM (
 
SELECT COALESCE (t1.ANALYSIS_METHOD, ' ') AS ANALYSIS_METHOD,
        CASE
           WHEN t1.ANALYSIS_METHOD = '0' THEN 'T'
           WHEN t1.ANALYSIS_METHOD = '1' THEN 'W'
           WHEN t1.ANALYSIS_METHOD = '2' THEN 'E'
           WHEN t1.ANALYSIS_METHOD = 'R' THEN 'RECEIVED'
           ELSE 'UKNOWN'
        END
           AS ANALYSIS_METHOD_DESCRIPTION,
        t1.ANALYSIS_CODE,
        COALESCE (t1.DATE_KEY, 0) AS DATE_KEY,
        t1.ANALYSIS_DATE,
        t1.ANALYSIS_READING,
        COALESCE (t1.SEQUENCE_KEY, 0) AS SEQUENCE_KEY,
        t1.LOT_REF_NUMBER,
        t1.PLANT_CODE,
        t1.TANK_CODE,
        t1.ANALYSIS_ORDER_DESCENDING - 1 AS ANALYSIS_ORDER_DESCENDING,
        CASE
           WHEN t1.ANALYSIS_ORDER_DESCENDING = 1 THEN 'CURRENT'
           WHEN t1.ANALYSIS_ORDER_DESCENDING = 2 THEN 'PRIOR'
           WHEN t1.ANALYSIS_ORDER_DESCENDING = 3 THEN '2_ND_PRIOR'
           WHEN t1.ANALYSIS_ORDER_DESCENDING = 4 THEN '3_RD_PRIOR'
           ELSE CAST (t1.ANALYSIS_ORDER_DESCENDING AS CHAR)
        END
           AS ANALYSIS_ORDER_DESCRIPTION,
        WIPS_UTILITY.WIPS_TIME_CONVERSION(UUB2REP.ANALYSIS_TIME) AS ANALYSIS_TIME,
        ISNULL(UUB2REP.ANALYSIS_WORK_ORDER, 'NOT SET') AS ANALYSIS_WO,
        ISNULL(UUB2REP.ANALYSIS_COMMENT, 'NO COMMENTS') AS ANALYSIS_COMMENT,
        ISNULL(UUB2REP.BARREL_NUMBER,' ') AS BARREL_NUMBER,
        t1.REGION AS REGION
FROM (SELECT UUB3REP.ANALYSIS_CATEGORY AS ANALYSIS_METHOD,
            UUB3REP.ANALYSIS_CODE AS ANALYSIS_CODE,
            UUB3REP.ANALYSIS_DATE AS DATE_KEY,
            WIPS_UTILITY.WIPS_DATE_CONVERSION(UUB3REP.ANALYSIS_DATE) AS ANALYSIS_DATE,
            UUB3REP.ANALYSIS_READING AS ANALYSIS_READING,
            UUB3REP.ANALYSIS_SEQUENCE AS SEQUENCE_KEY,
            UUB3REP.LOT_REF_NUMBER AS LOT_REF_NUMBER,
            UUB3REP.PLANT_CODE AS PLANT_CODE,
            UUB3REP.TANK_CODE AS TANK_CODE,
            ROW_NUMBER () OVER (PARTITION BY UUB3REP.ANALYSIS_CODE, UUB3REP.LOT_REF_NUMBER  ORDER BY UUB3REP.ANALYSIS_DATE DESC, UUB3REP.ANALYSIS_SEQUENCE DESC) ANALYSIS_ORDER_DESCENDING,
            UUB3REP.REGION AS REGION
       FROM (select AU.*, 'AU' REGION from QLIK_EXT_WIPSAU.UUB3REP AU ) UUB3REP
	   
	   ) t1

LEFT OUTER JOIN   ( select AU.*, 'AU' REGION from QLIK_EXT_WIPSAU.UUB2REP AU ) UUB2REP     
  ON 
      t1.LOT_REF_NUMBER = UUB2REP.LOT_REF_NUMBER AND
      t1.PLANT_CODE = UUB2REP.PLANT_CODE AND
      t1.TANK_CODE = UUB2REP.TANK_CODE AND
      t1.REGION = UUB2REP.REGION AND
      ISNULL(t1.DATE_KEY, 0) = ISNULL(UUB2REP.ANALYSIS_DATE,0) AND
      ISNULL(t1.SEQUENCE_KEY, 0) = ISNULL(UUB2REP.ANALYSIS_SEQUENCE,0) AND
      ISNULL(t1.ANALYSIS_METHOD, ' ')=ISNULL(UUB2REP.ANALYSIS_CATEGORY, ' ')

	  WHERE t1.ANALYSIS_ORDER_DESCENDING = 1  ---CURRENT ONLY
) X 

INNER JOIN DWH_OPERATIONS.V_D_LotCurrentWine  VCW 
  ON VCW.LOT_REF_NUMBER = X.LOT_REF_NUMBER AND VCW.REGION = 'AU'

GO


DROP VIEW IF EXISTS [DWH_OPERATIONS].[V_REP_BarrelFillStirDates]
GO

 /*
----Creation History-----
Date Created: 21/07/2022
Author: Daniel Aguayo
Project: View of Cellar Activities Work Orders with process code BRT & OAF,  with their respective tanks, dates, locations and blends filtered on  AU WIPS tables only.
This View was created for the purpose of feeding the EFERM tool in Nick Bruer's team, replacing the OBIEE View 'Barrel Fill Top Stir Dates'

*/
CREATE VIEW [DWH_OPERATIONS].[V_REP_BarrelFillStirDates] AS

SELECT DISTINCT
  [Process Code],
  CONVERT(varchar,[Cellar Activity Date],103) "Cellas Activity Date",
  [Work Order],
  [To Tank Code],
  [To After Blend Id],
  [To Plant Code]

FROM (
	SELECT    
	WIPS_UTILITY.WIPS_DATE_CONVERSION (CAST (c1.CELLAR_ACTIVITY_DATE AS VARCHAR))  AS "Cellar Activity Date",
	c1.PROCESS_CODE AS "Process Code", 
	c1.CELLAR_WORK_ORDER as "Work Order",
	ISNULL(c3.TANK_CODE,'')  as "To Tank Code",
	ISNULL(c3.PLANT_CODE,'') as "To Plant Code",
			concat(coalesce(left(cast(c4.BRAND_CODE as varchar)+replicate(' ',2),2), '  ') 
				, coalesce(left(cast(c4.WINE_TYPE_CODE as varchar)+replicate(' ',3),3),'   ')
				, coalesce(left(cast(c4.CELLAR_VINTAGE as varchar)+replicate(' ',2),2),'  ')
				, coalesce(left(concat(cast(c4.BLEND_STATUS_CODE as varchar),' '),1),' ')
				, coalesce(left(cast(c4.APPELLATION_CODE as varchar)+replicate(' ',2),2),'  ')
				, coalesce(left(cast(c4.VENDOR_CODE as varchar)+replicate(' ',3),3),'   ')
				, coalesce(left(concat(cast(c4.BLEND_STATUS_CODE_TWO as varchar),' '),1),' ')
				, c4.CELLAR_LOT_NUMBER_USER) AS "To After Blend Id"
	FROM  QLIK_EXT_WIPSAU.UUBTCPP  c1 -- cellar activity, category 1 (FROM BEFORE)
    LEFT OUTER JOIN  QLIK_EXT_WIPSAU.UUBTCPP  c2  -- cellar activity, category 2 (FROM AFTER)
        ON c1.CELLAR_SEQUENCE_NUMBER = c2.CELLAR_SEQUENCE_NUMBER AND c1.CELLAR_ACTIVITY_CATEGORY = 1 AND c2.CELLAR_ACTIVITY_CATEGORY = 2 
    LEFT OUTER JOIN QLIK_EXT_WIPSAU.UUBTCPP c3   -- cellar activity, category 3 (TO BEFORE)
        ON c1.CELLAR_SEQUENCE_NUMBER = c3.CELLAR_SEQUENCE_NUMBER AND c1.CELLAR_ACTIVITY_CATEGORY = 1 AND c3.CELLAR_ACTIVITY_CATEGORY = 3 
    LEFT OUTER JOIN QLIK_EXT_WIPSAU.UUBTCPP c4
        ON c1.CELLAR_SEQUENCE_NUMBER = c4.CELLAR_SEQUENCE_NUMBER AND c1.CELLAR_ACTIVITY_CATEGORY = 1 AND c4.CELLAR_ACTIVITY_CATEGORY = 4 
    LEFT OUTER JOIN QLIK_EXT_WIPSAU.UUAHREP  t1  -- tanks, Cat#1 to get FROM_CASE_CODE
        ON c1.PLANT_CODE  = t1.PLANT_CODE  AND c1.TANK_CODE = t1.TANK_CODE AND t1.SUSPENDED ='N' AND c1.CELLAR_ACTIVITY_CATEGORY = 1 
    LEFT OUTER JOIN   QLIK_EXT_WIPSAU.UUA2REP  cs1 -- case reference table to get "FROM" case properties
        ON t1.CASE_CODE = cs1.CASE_CODE 
    LEFT OUTER JOIN QLIK_EXT_WIPSAU.UUAHREP  t3  -- tanks, Cat#3 to get TO_CASE_CODE
        ON c3.PLANT_CODE  = t3.PLANT_CODE  AND c3.TANK_CODE = t3.TANK_CODE AND t3.SUSPENDED ='N' AND c3.CELLAR_ACTIVITY_CATEGORY = 3 
    LEFT OUTER JOIN  QLIK_EXT_WIPSAU.UUA2REP  cs3  -- case reference table to get "TO" case properties
        ON t3.CASE_CODE = cs3.CASE_CODE 
    LEFT OUTER JOIN  QLIK_EXT_WIPSAU.UUBUCPP z1 -- cellar extention to get WO, additions and bottling details
        ON c1.CELLAR_SEQUENCE_NUMBER = z1.CELLAR_SEQUENCE_NUMBER 
    LEFT OUTER JOIN  QLIK_EXT_WIPSAU.UUA2REP  cs0   -- cases for header information
        ON z1.CASE_CODE = cs0.CASE_CODE 
    LEFT OUTER JOIN	QLIK_EXT_WIPSAU.UUASREP  m1   -- Material, UOM, Cat#1
        ON c1.MATERIAL_CODE = m1.MATERIAL_CODE AND c1.CELLAR_ACTIVITY_CATEGORY = 1 
    LEFT OUTER JOIN QLIK_EXT_WIPSAU.UUAWREP u1 -- UOM Category for V=Volume and W=Weight, Cat#1
        ON m1.UNIT_OF_MEASURE_CODE = u1.UNIT_OF_MEASURE_CODE 
    LEFT OUTER JOIN QLIK_EXT_WIPSAU.UUASREP m3 -- Material, UOM, Cat#3
        ON c3.MATERIAL_CODE = m3.MATERIAL_CODE AND c3.CELLAR_ACTIVITY_CATEGORY = 3 
    LEFT OUTER JOIN  QLIK_EXT_WIPSAU.UUAWREP u3 -- UOM Category for V=Volume and W=Weight, Cat#3
        ON m3.UNIT_OF_MEASURE_CODE = u3.UNIT_OF_MEASURE_CODE 
    LEFT OUTER JOIN QLIK_EXT_WIPSAU.UUASREP m4 -- Material, UOM, Cat#4
        ON c4.MATERIAL_CODE = m4.MATERIAL_CODE AND c4.CELLAR_ACTIVITY_CATEGORY = 4 
    LEFT OUTER JOIN QLIK_EXT_WIPSAU.UUAWREP u4 -- UOM Category for V=Volume and W=Weight, Cat#1
        ON m4.UNIT_OF_MEASURE_CODE = u4.UNIT_OF_MEASURE_CODE 
    INNER JOIN QLIK_EXT_WIPSAU.UUBFREP  z2 -- PROCESS
        ON z2.PROCESS_CODE = c1.PROCESS_CODE 
    LEFT OUTER JOIN   QLIK_EXT_WIPSAU.UUC3CPP  z3 
        ON z3.PLANT_CODE = z1.PLANT_CODE_WORK_ORDER AND z3.WORK_ORDER_NUMERIC = z1.WORK_ORDER_NUMERIC AND z3.WORK_ORDER_LINE_NUMBER = z1.WORK_ORDER_LINE_NUMBER
    LEFT OUTER JOIN [DWH_OPERATIONS].[REF_MAX_IU_PER_CA] iu1  -- MAX IU percentage per cellar activity and lot, category 1 (FROM_INTENDED_USE)
        ON      c1.CELLAR_SEQUENCE_NUMBER = iu1.CELLAR_SEQUENCE_NUMBER
        AND c1.CELLAR_ACTIVITY_CATEGORY = iu1.CELLAR_ACTIVITY_CATEGORY
        AND c1.LOT_REF_NUMBER = iu1.LOT_REF_NUMBER
        AND c1.CELLAR_ACTIVITY_CATEGORY = 1
        AND  iu1.REGION = 'AU'
    LEFT OUTER JOIN [DWH_OPERATIONS].[REF_MAX_IU_PER_CA] iu3  -- MAX IU percentage per cellar activity and lot, category 3 (TO_BEFORE_INTENDED_USE)
        ON      c3.CELLAR_SEQUENCE_NUMBER = iu3.CELLAR_SEQUENCE_NUMBER
        AND c3.CELLAR_ACTIVITY_CATEGORY = iu3.CELLAR_ACTIVITY_CATEGORY
        AND c3.LOT_REF_NUMBER = iu3.LOT_REF_NUMBER
        AND c3.CELLAR_ACTIVITY_CATEGORY = 3  
        AND iu3.REGION = 'AU'
    LEFT OUTER JOIN [DWH_OPERATIONS].[REF_MAX_IU_PER_CA] iu4  -- MAX IU percentage per cellar activity and lot, category 3 (TO_AFTER_INTENDED_USE)
        ON      c4.CELLAR_SEQUENCE_NUMBER = iu4.CELLAR_SEQUENCE_NUMBER
        AND c4.CELLAR_ACTIVITY_CATEGORY = iu4.CELLAR_ACTIVITY_CATEGORY
        AND c4.LOT_REF_NUMBER = iu4.LOT_REF_NUMBER
        AND c4.CELLAR_ACTIVITY_CATEGORY = 4  
        AND iu4.REGION = 'AU'
   WHERE 
   c1.CELLAR_ACTIVITY_CATEGORY = 1 
   AND c1.CELLAR_ACTIVITY_DATE > 1000000 + (CAST ((YEAR (sysdatetime())) AS INT) - 2000) * 10000 - 30000
   AND c1.PROCESS_CODE IN ('BRT', 'OAF') AND c3.TANK_CODE LIKE 'MC%' 
) X

GO

DROP VIEW IF EXISTS [DWH_OPERATIONS].[V_REP_BlockInfo]
GO

/*
    ---REVISION HISTORY---
    DATE CREATED:	21 July 2022
    AUTHOR:			Derek Papesch
    PROJECT:		Nebula OBI Migration - Operations
    COMMENTS:		This is a data extract report to produce data for 'Block Info2' data extract required by eFerm solution.
					Returns the list of blocks with reference numbers and grower block comments for the current vintage.

*/
CREATE VIEW [DWH_OPERATIONS].[V_REP_BlockInfo] AS 

	SELECT
	   CONCAT(VENDOR_CODE,BLOCK_REF_NUMBER,VINTAGE) AS Ven_Blk_Yr
	  ,VENDOR_CODE AS 'Vendor Code'
	  ,BLOCK_REF_NUMBER AS 'Block Ref Number'
	  ,VINTAGE AS 'Vintage'
	  ,GROWER_BLOCK_DESCRIPTION 'GB Description'
	  ,GROWER_BLOCK_COMMENT 'GB Comment'
	FROM [DWH_OPERATIONS].[V_D_Block]
	WHERE VINTAGE = '22'
	  AND REGION = 'AU'
GO


DROP VIEW IF EXISTS [DWH_OPERATIONS].[V_REP_WT_BookedTonnes7Days]
GO

 /*
----Creation History-----
Date Created: 26/07/2022
Author: Daniel Aguayo
Project: View  of the Scheduled Booked Tonnes with Vendors and their respectinve variaty and intended use filtered on AU WIPS tables only.
This View was created for the purpose of feeding the EFERM tool in Nick Bruer's team, replacing the OBIEE Bookings(next 7 days)

*/
CREATE VIEW [DWH_OPERATIONS].[V_REP_WT_BookedTonnes7Days] AS

SELECT 
	PLANT_CODE AS "Scheduled Plant Code"
	,INTAKE_DATE AS "Date"
	,INTAKE_TIME_SLOT AS "Time"
	,CRUSHER_NUMBER AS "Scheduled Crusher"
	,VARIETAL_CODE AS "Grape"
	,APPELLATION_CODE AS "Area"
	,ASSESSED_IU AS "Assessed IU"
	,INTENDED_USE_CODE AS "Intake IU"
	,SUM(ESTIMATED_DELIVERY_WEIGHT) AS "Booked Tonnes"
FROM 
(
	SELECT  DISTINCT
		VHS.APPELLATION_CODE,
		VHS.CRUSHER_NUMBER,
		CONVERT(varchar,VHS.INTAKE_DATE,103) AS INTAKE_DATE,
		CONVERT(varchar,VHS.INTAKE_TIME_SLOT,108)AS INTAKE_TIME_SLOT,
		VHS.INTENDED_USE_CODE,
		VHS.VARIETAL_CODE,
		VHS.PLANT_CODE,
		CASE WHEN LEN(VUF.ASSESSED_IU) > 3 THEN VUF.ASSESSED_IU
		ELSE  VHS.INTENDED_USE_CODE END AS ASSESSED_IU,
		VGD.ESTIMATED_DELIVERY_WEIGHT
	FROM  [DWH_OPERATIONS].[V_FT_GrapeDeliveryScheduleDetail] VGD
	  LEFT JOIN  [DWH_OPERATIONS].[V_FT_GrapeDeliveryScheduleDetail] VHS
		ON VHS.INTAKE_KEY = VGD.INTAKE_KEY AND VHS.REGION = 'AU'
	  LEFT JOIN   [DWH_OPERATIONS].[V_D_BlockUserFields] VUF
		ON VUF.VINTAGE = VGD.VINTAGE AND VUF.VENDOR_CODE = VGD.VENDOR_CODE AND VUF.BLK_PK = VGD.BLOCK_PK AND VUF.REGION = 'AU'
	WHERE VGD.REGION ='AU' AND VGD.ESTIMATED_DELIVERY_WEIGHT > 0 AND VHS.INTAKE_DATE BETWEEN DATEADD(year,-1,getdate()) AND DATEADD(day,8,getdate())
) X
GROUP BY
 PLANT_CODE 
,INTAKE_DATE 
,INTAKE_TIME_SLOT 
,CRUSHER_NUMBER 
,VARIETAL_CODE 
,APPELLATION_CODE 
,ASSESSED_IU 
,INTENDED_USE_CODE

GO

DROP VIEW IF EXISTS [DWH_OPERATIONS].[V_REP_WT_CrushedTonnes]
GO

 /*
----Creation History-----
Date Created: 26/07/2022
Author: Daniel Aguayo
Project: View  of Current Calendar Year Crushed Tonees by Date WT Group Code and Varietal filtered on AU WIPS tables only.
This View was created for the purpose of feeding the EFERM tool in Nick Bruer's team, replacing the OBIEE View Crushed Tonnes

*/
CREATE VIEW [DWH_OPERATIONS].[V_REP_WT_CrushedTonnes] AS

SELECT
	 Plant_Code AS "WT Plant Code"
	,Entry_Date AS "Entry Date"
	,Appellation_Code AS "Appelation Code"
	,NULLIF(PRODUCT_GROUP_CODE,'') AS "WT Use Product Group Code" --,WT_Useuct_Group_Code AS "WY Use Product Group Code"
	,Varietal_Name AS "Varietal Name"
	,WT_Tonnes_Sum as "WT Tonnes"
FROM
(
	SELECT
		 DBV.VARIETAL_NAME  AS Varietal_Name
		,WTP.APPELLATION_CODE AS Appellation_Code
		,WTP.WT_PLANT_CODE AS Plant_Code
		,convert(varchar(10),DWD.ENTRY_DATE,120) AS Entry_Date
		,LEFT(VWU.PRODUCT_GROUP_CODE,1) AS PRODUCT_GROUP_CODE  --WT_Useuct_Group_Code =  PRESENTATION NAME NAME: "More WT Use Fields"."WT Use Product Group Code" LOGICAL: D_WEIGH_TAG_USE WT Use Product Group Code  -- WITH OPERATION LEFT(X,1)
		,SUM(WTP.WT_TONNES) AS WT_Tonnes_Sum
	FROM [DWH_OPERATIONS].[V_FT_PlantWeighTag] WTP   
	  LEFT JOIN [DWH_OPERATIONS].[V_D_Variety]  DBV 
		ON DBV.VARIETAL_CODE = WTP.VARIETAL_CODE AND DBV.REGION = 'AU'
	  LEFT JOIN 
	  (
	  SELECT DISTINCT
				WT_PK
				,ENTRY_DATE
				,REGION
	  FROM [DWH_OPERATIONS].[V_D_WeighTagDetail]
	  WHERE  WT_PK IS NOT NULL 
	  ) DWD
		ON DWD.WT_PK = WTP.WT_PK  AND DWD.REGION = 'AU'
	  LEFT JOIN [DWH_OPERATIONS].[V_D_WeighTagUse] VWU
		ON VWU.INTENDED_USE_CODE = WTP.IU_WT_USE_CODE AND VWU.REGION = 'AU'
	WHERE DWD.ENTRY_DATE > DATEFROMPARTS(YEAR(GETDATE()),1,1) -- ALWAYS REFERRING TO THE BEGINNING OF THE CURRENT CALENDAR YEAR, TO BE CONFIRMED WITH STAKEHOLDERS (DYNAMIC FILTER)
	  AND WTP.REGION = 'AU'
	GROUP BY
	   WTP.WT_PLANT_CODE
	  ,convert(varchar(10),DWD.ENTRY_DATE,120)
	  ,WTP.APPELLATION_CODE
	  ,LEFT(VWU.PRODUCT_GROUP_CODE,1) 
	  ,DBV.VARIETAL_NAME
) X
GO

DROP VIEW IF EXISTS [DWH_OPERATIONS].[V_REP_FullBarrel]
GO

 /*
----Creation History-----
Date Created: 21/07/2022
Author: Daniel Aguayo
Project: View of Unique NOT EMPTY Barrel List and their attributes, such as Country of Origin, contained blend, tank etc. filtered on AU WIPS tables only.
This View was created for the purpose of feeding the EFERM tool in Nick Bruer's team, replacing the OBIEE View 'Full Barrel Data Dump'

*/
CREATE VIEW [DWH_OPERATIONS].[V_REP_FullBarrel] AS

SELECT
	PLANT_CODE "Plant Code",
	TANK_CODE "Tank Code",
	BARREL_NUMBER "Barrel Number",
	BARREL_GROUP "Barrel Group Code",
	VENDOR_CODE "Cooper",
	COUNTRY_OF_WOOD_ORIGIN  "Country of Origin",
	TANK_LOCATION "Tank Location",
	BLEND_ID "Blend Id",
	CONVERT(VARCHAR,LAST_MOVE_DATE,103) "Last Move Date",
	BRAND_IU_VOLUME "Volume",
	BARREL_ROW "Row",
	STORAGE_PLANT_CODE "Storage Plant Code",
	BARREL_POSITION "Position",
	BARREL_CAPACITY "Barrel Capacity"
FROM
(
	SELECT 
		VBG.BARREL_GROUP,
		VBG.VENDOR_CODE,
		VVE.VENDOR_NAME,
		VBG.BARREL_NUMBER,
		VBG.BARREL_ROW,
		VBG.STORAGE_PLANT_CODE,
		VBG.PLANT_CODE,
		VBG.COUNTRY_OF_WOOD_ORIGIN,
		CASE  
		  WHEN VBG.TANK_CODE IS NULL  OR VBG.TANK_CODE = ' ' THEN 'Y' 
		  ELSE 'N' 
		END AS IS_BARREL_EMPTY,
		VDT.TANK_CODE,
		VDT.TANK_LOCATION,
		VDT.BARREL_TANK,
		VCW.IS_TANK_EMPTY,
		VCW.BLEND_ID,
		VCW.LAST_MOVE_DATE,
		VCW.LOT_REF_NUMBER,
		VBG.BARREL_POSITION,
		VBG.BARREL_CAPACITY,
		VCW.BRAND_IU_VOLUME
	FROM [DWH_OPERATIONS].[V_D_BarrelNdBgrNemp] VBG
	  LEFT JOIN [DWH_OPERATIONS].[V_D_Vendor] VVE
		ON VVE.VENDOR_KEY = VBG.VENDOR_KEY AND VVE.REGION = 'AU'
	  LEFT JOIN 
	  (
	  SELECT B.PLANT_CODE, B.TANK_CODE, B.IS_TANK_EMPTY, B.BLEND_ID, B.LAST_MOVE_DATE, B.LOT_REF_NUMBER, A.BRAND_IU_VOLUME 
	  FROM 
		(
		SELECT PLANT_CODE AS PLANT_CODE2, TANK_CODE AS TANK_CODE2, BRAND_IU_VOLUME 
		FROM [DWH_OPERATIONS].[V_FT_VolumeCurrentWine] WHERE REGION = 'AU'
		) A
		LEFT JOIN [DWH_OPERATIONS].[V_D_LotCurrentWine] B
		  ON CONCAT(A.PLANT_CODE2,A.TANK_CODE2) = CONCAT(B.PLANT_CODE,B.TANK_CODE)  AND B.REGION = 'AU'
	  ) VCW
	  ON CONCAT(VCW.PLANT_CODE,VCW.TANK_CODE) = CONCAT(VBG.PLANT_CODE,VBG.TANK_CODE)
	  LEFT JOIN  [DWH_OPERATIONS].[V_D_Tank] VDT
		ON CONCAT(VDT.PLANT_CODE,VDT.TANK_CODE) = CONCAT(VBG.PLANT_CODE,VBG.TANK_CODE) AND VDT.REGION = 'AU' AND VDT.TANK_TYPE_DESCRIPTION NOT IN ('DUMMY TANK')
	WHERE VBG.REGION = 'AU' AND VDT.BARREL_TANK = 'Y' AND VCW.IS_TANK_EMPTY = 'N' AND CASE WHEN VBG.TANK_CODE IS NULL  OR VBG.TANK_CODE = ' ' THEN 'Y' ELSE 'N' END = 'N'
) X

GO

DROP VIEW IF EXISTS [DWH_OPERATIONS].[V_REP_IntendedUse]
GO

 /*
----Creation History-----
Date Created: 21/07/2022
Author: Daniel Aguayo
Project: View of Unique intended use and their attributes filtered on AU WIPS tables only.
This View was created for the purpose of feeding the EFERM tool in Nick Bruer's team, replacing the OBIEE View Intended Use Reference Table Dump

*/
CREATE VIEW [DWH_OPERATIONS].[V_REP_IntendedUse] AS

SELECT
	INTENDED_USE_CODE "IU Code",
	INTENDED_USE_NAME "IU Name",
	BRAND_CODE "IU Brand Code",
	PRODUCT_GROUP_CODE "IU Product Group Code",
	PRODUCT_GROUP_NAME "Group Name",
	VARIETAL_CODE "IU Varietal Code",
	VARIETAL_CODE_2 "IU Varietal Code 2",
	VARIETAL_CODE_3 "IU Varietal Code 3",
	APPELLATION_CODE "IU Appellation Code",
	APPELLATION_CODE_2 "IU Appellation Code 2",
	APPELLATION_CODE_3 "IU Appellation Code 3",
	SUSPENDED "IU Suspended",
	STYLE "Style",
	QUALITY "Quality"
FROM
(
	SELECT
		APPELLATION_CODE,
		APPELLATION_CODE_2,
		APPELLATION_CODE_3,
		BRAND_CODE,
		INTENDED_USE_CODE,
		INTENDED_USE_NAME,
		PRODUCT_GROUP_CODE,
		PRODUCT_GROUP_NAME,
		SUSPENDED,
		VARIETAL_CODE,
		VARIETAL_CODE_2,
		VARIETAL_CODE_3,
		CASE 
			WHEN LEFT(PRODUCT_GROUP_CODE,1) LIKE 'R%' THEN 'Red Wine'
			WHEN LEFT(PRODUCT_GROUP_CODE,1) LIKE 'W%' THEN 'White Wine'
			WHEN LEFT(PRODUCT_GROUP_CODE,1) LIKE 'S%' THEN 'Sparkling'
			WHEN LEFT(PRODUCT_GROUP_CODE,1)  LIKE 'F%' THEN 'Fortified'
			WHEN LEFT(PRODUCT_GROUP_CODE,1)  LIKE 'O%' THEN 'Rose'
			WHEN LEFT(PRODUCT_GROUP_CODE,1)  LIKE 'B%' THEN 'Non Wine'
			ELSE  LEFT(PRODUCT_GROUP_CODE,1)
		END  AS PRODUCT_GROUP_DESC,
		LEFT(PRODUCT_GROUP_CODE,1) STYLE,
		RIGHT(PRODUCT_GROUP_CODE,1) QUALITY
	FROM [DWH_OPERATIONS].[V_D_IntendedUse]
	WHERE REGION = 'AU'
) X

GO

DROP VIEW IF EXISTS [DWH_OPERATIONS].[V_REP_OutstandingWorkOrders]
GO

/*
    ---REVISION HISTORY---
    DATE CREATED:	19 July 2022
	AUTHOR:			Derek Papesch
    PROJECT:		Nebula OBI Migration - Operations
    COMMENTS:		This is a data extract report to produce data for 'Outstanding WO' data extract required by various operations solutions.
					Returns information on outstanding work orders.

*/
CREATE VIEW [DWH_OPERATIONS].[V_REP_OutstandingWorkOrders] AS 

  SELECT 
     WO_D.PLANT_CODE as 'WO Plant Code'
    ,WO_D.CELLAR_ACTIVITY_DATE as 'WO Cellar Activity Date'
    ,WO_D.WORK_ORDER_NUMERIC as 'WO Numeric'
    ,WO_D.WORK_ORDER_DESCRIPTION as 'WO Description'
    ,WO_D.FROM_TANK as 'WO From Tank'
    ,WO_D.TO_TANK as 'WO To Tank'
    ,SUM(WO_FT.TO_AFTER_VOLUME - WO_FT.TO_BEFORE_VOLUME) as 'Total litres'
  FROM DWH_OPERATIONS.V_D_WorkOrder WO_D
    INNER JOIN DWH_OPERATIONS.V_D_WorkOrder WO_FT
      ON WO_FT.PLANT_CODE = WO_D.PLANT_CODE 
        AND WO_FT.WORK_ORDER_LINE_NUMBER = WO_D.WORK_ORDER_LINE_NUMBER 
        AND WO_FT.WORK_ORDER_NUMERIC = WO_D.WORK_ORDER_NUMERIC
  WHERE WO_D.REGION = 'AU' AND WO_FT.REGION = 'AU'
    AND WO_D.WORK_ORDER_DETAIL_STATUS = 'C'
  GROUP BY WO_D.PLANT_CODE, WO_D.CELLAR_ACTIVITY_DATE, WO_D.WORK_ORDER_NUMERIC, WO_D.WORK_ORDER_DESCRIPTION, WO_D.FROM_TANK,WO_D.TO_TANK

GO

DROP VIEW IF EXISTS [DWH_OPERATIONS].[V_REP_TankBlockInfo]
GO


/*
    ---REVISION HISTORY---
    DATE CREATED:	15 June 2022
    AUTHOR:			Derek Papesch
    PROJECT:		Nebula OBI Migration - Operations
    COMMENTS:		This is a data extract report to produce data for 'Block Info' data extract required by eFerm solution.

*/
CREATE VIEW [DWH_OPERATIONS].[V_REP_TankBlockInfo] AS 

SELECT
	ISNULL(A.PLANT_CODE, B.PLANT_CODE) AS PLANT_CODE,
	ISNULL(A.TANK_CODE, B.TANK_CODE) AS TANK_CODE,
	ISNULL(A.TANK_LOCATION, B.TANK_LOCATION) AS TANK_LOCATION,
	ISNULL(A.BLEND_ID,B.BLEND_ID) AS BLEND_ID,
	B.BRAND_IU_VOLUME AS VOLUME,
	A.VENDOR_CODE,
	A.BLOCK_REF_NUMBER,
	A.VINTAGE,
	A.PERCENT_TRUE_GROWER_BLOCK AS PERCENT_TRUE_GROWER_BLOCK,
	A.VENDOR_NAME,
	A.VARIETAL_CODE,
	A.APPELLATION_CODE
FROM
(
	-- part A - Find Plant/tank/block/vintage percent true grower block
	
	SELECT
		LOTWINE.PLANT_CODE,
		LOTWINE.TANK_CODE,
		TANK.[LOCATION] as TANK_LOCATION,
		BLK.BLOCK_REF_NUMBER,
		VENDOR.VENDOR_CODE,
		VENDOR.VENDOR_NAME,
		BLK.VINTAGE,
		CASE 
		  WHEN LEN(APP.LEVEL_6_APPELLATION_CODE) > 1
		    THEN APP.LEVEL_6_APPELLATION_CODE
		  WHEN LEN(APP.LEVEL_5_APPELLATION_CODE) > 1
		    THEN APP.LEVEL_5_APPELLATION_CODE
		  ELSE APP.LEVEL_4_APPELLATION_CODE
		END AS APPELLATION_CODE,
		BLK.VARIETAL_CODE,
		concat(coalesce(left(cast(LOTWINE.BRAND_CODE as varchar)+replicate(' ',2),2), '  ') 
			, coalesce(left(cast(LOTWINE.WINE_TYPE_CODE as varchar)+replicate(' ',3),3),'   ')
			, coalesce(left(cast(LOTWINE.BLEND_VINTAGE as varchar)+replicate(' ',2),2),'  ')
			, coalesce(left(concat(cast(LOTWINE.BLEND_STATUS_CODE as varchar),' '),1),' ')
			, coalesce(left(cast(LOTWINE.APPELLATION_CODE as varchar)+replicate(' ',2),2),'  ')
			, coalesce(left(cast(LOTWINE.VENDOR_CODE as varchar)+replicate(' ',3),3),'   ')
			, coalesce(left(concat(cast(LOTWINE.BLEND_STATUS_TWO as varchar),' '),1),' ')
			, LOTWINE.BLEND_LOT_NUMBER_USER) AS BLEND_ID,
		SUM
		(
			CASE 
				WHEN AD.VARIETAL_PROCESSING_CODE <> 'E' and ISNULL(lot1.TOTAL_PERCENT_FOR_TRUE_BLOCKS, 0) <> 0 THEN BA.PERCENT_GROWER_BLOCK / lot1.TOTAL_PERCENT_FOR_TRUE_BLOCKS * 100
			ELSE 0
			END
		) as PERCENT_TRUE_GROWER_BLOCK
	FROM 
		QLIK_EXT_WIPSAU.UUANREP BLK 
		LEFT OUTER JOIN
		QLIK_EXT_WIPSAU.UUAOREP VENDOR
			On VENDOR.VENDOR_CODE = BLK.VENDOR_CODE
		LEFT OUTER JOIN
		QLIK_EXT_WIPSAU.UUADREP AD
			On AD.VARIETAL_CODE = BLK.VARIETAL_CODE
		INNER JOIN
		QLIK_EXT_WIPSAU.UUBACPP BA
			On BLK.BLOCK_REF_NUMBER = BA.BLOCK_REF_NUMBER
			AND BLK.VENDOR_CODE = BA.VENDOR_CODE
			AND BLK.VINTAGE = BA.VINTAGE
		INNER JOIN
		(
			SELECT AU.LOT_REF_NUMBER LOT_REF_NUMBER, SUM(AU.PERCENT_GROWER_BLOCK) TOTAL_PERCENT_FOR_TRUE_BLOCKS
			FROM
			QLIK_EXT_WIPSAU.UUBACPP AU
			INNER JOIN QLIK_EXT_WIPSAU.UUARCPP AR 
				ON AU.LOT_REF_NUMBER=AR.LOT_REF_NUMBER 
				and AR.LOT_CATEGORY=2 
			INNER JOIN QLIK_EXT_WIPSAU.UUANREP AN
		        ON AN.BLOCK_REF_NUMBER=AU.BLOCK_REF_NUMBER  
		        and AN.VENDOR_CODE=AU.VENDOR_CODE
		        and AN.VINTAGE=AU.VINTAGE
	        INNER JOIN QLIK_EXT_WIPSAU.UUADREP AD
		        ON AN.VARIETAL_CODE=AD.VARIETAL_CODE
		        AND AD.VARIETAL_PROCESSING_CODE <>'E'
			GROUP BY AU.LOT_REF_NUMBER
			
		) lot1
			On BA.LOT_REF_NUMBER = lot1.LOT_REF_NUMBER
	    INNER JOIN
	    QLIK_EXT_WIPSAU.UUARCPP LOTWINE 
	    	On LOTWINE.LOT_REF_NUMBER = lot1.LOT_REF_NUMBER
	    INNER JOIN
	    QLIK_EXT_WIPSAU.UUAHREP TANK
	    	On TANK.PLANT_CODE = LOTWINE.PLANT_CODE
		     and TANK.TANK_CODE = LOTWINE.TANK_CODE
		INNER JOIN
		QLIK_EXT_WIPSAU.UUATCPP VOLWINE
			ON LOTWINE.LOT_REF_NUMBER = VOLWINE.LOT_REF_NUMBER
		LEFT JOIN [DWH_OPERATIONS].[V_D_Appellation] APP
		  ON BLK.APPELLATION_CODE = APP.APPELLATION_CODE AND APP.REGION = 'AU'
	WHERE TOTAL_PERCENT_FOR_TRUE_BLOCKS <> 0
	GROUP BY TANK.LOCATION
	     , VENDOR.VENDOR_CODE
	     , VENDOR.VENDOR_NAME
	     , concat(coalesce(left(cast(LOTWINE.BRAND_CODE as varchar)+replicate(' ',2),2), '  ') 
	     , coalesce(left(cast(LOTWINE.WINE_TYPE_CODE as varchar)+replicate(' ',3),3),'   ')
	     , coalesce(left(cast(LOTWINE.BLEND_VINTAGE as varchar)+replicate(' ',2),2),'  ')
	     , coalesce(left(concat(cast(LOTWINE.BLEND_STATUS_CODE as varchar),' '),1),' ')
	     , coalesce(left(cast(LOTWINE.APPELLATION_CODE as varchar)+replicate(' ',2),2),'  ')
	     , coalesce(left(cast(LOTWINE.VENDOR_CODE as varchar)+replicate(' ',3),3),'   ')
	     , coalesce(left(concat(cast(LOTWINE.BLEND_STATUS_TWO as varchar),' '),1),' ')
	     , LOTWINE.BLEND_LOT_NUMBER_USER)
	     , LOTWINE.PLANT_CODE
	     , LOTWINE.TANK_CODE
	     , BLK.BLOCK_REF_NUMBER
	     , BLK.VINTAGE
	     , BLK.APPELLATION_CODE
		 ,CASE 
		  WHEN LEN(APP.LEVEL_6_APPELLATION_CODE) > 1
		    THEN APP.LEVEL_6_APPELLATION_CODE
		  WHEN LEN(APP.LEVEL_5_APPELLATION_CODE) > 1
		    THEN APP.LEVEL_5_APPELLATION_CODE
		  ELSE APP.LEVEL_4_APPELLATION_CODE
		  END
	     , BLK.VARIETAL_CODE
) A
FULL OUTER JOIN
(
	-- Part B - Find Plant/tank blend and IU Volume

	select sum(VOLWINE.BRAND_IU_VOLUME) as BRAND_IU_VOLUME,
	     LOTWINE.PLANT_CODE as PLANT_CODE,
	     LOTWINE.TANK_CODE as TANK_CODE,
	     TANK.LOCATION as TANK_LOCATION,
	     concat(coalesce(left(cast(LOTWINE.BRAND_CODE as varchar)+replicate(' ',2),2), '  ') 
			, coalesce(left(cast(LOTWINE.WINE_TYPE_CODE as varchar)+replicate(' ',3),3),'   ')
			, coalesce(left(cast(LOTWINE.BLEND_VINTAGE as varchar)+replicate(' ',2),2),'  ')
			, coalesce(left(concat(cast(LOTWINE.BLEND_STATUS_CODE as varchar),' '),1),' ')
			, coalesce(left(cast(LOTWINE.APPELLATION_CODE as varchar)+replicate(' ',2),2),'  ')
			, coalesce(left(cast(LOTWINE.VENDOR_CODE as varchar)+replicate(' ',3),3),'   ')
			, coalesce(left(concat(cast(LOTWINE.BLEND_STATUS_TWO as varchar),' '),1),' ')
			, LOTWINE.BLEND_LOT_NUMBER_USER) AS BLEND_ID
	FROM QLIK_EXT_WIPSAU.UUAHREP TANK /* D_TANK_CURRENT_WINE */
	  INNER JOIN QLIK_EXT_WIPSAU.UUARCPP LOTWINE /* D_LOT_CURRENT_WINE */
		ON TANK.PLANT_CODE = LOTWINE.PLANT_CODE
		 AND TANK.TANK_CODE = LOTWINE.TANK_CODE 
	  INNER JOIN
	  (
			SELECT SUM(BRAND_IU_VOLUME) BRAND_IU_VOLUME, LOT_REF_NUMBER FROM  QLIK_EXT_WIPSAU.UUATCPP GROUP BY LOT_REF_NUMBER
	  ) VOLWINE /* D_LOT_VOLUME_CURRENT_WINE */
	    ON LOTWINE.LOT_REF_NUMBER = VOLWINE.LOT_REF_NUMBER 
	WHERE LOTWINE.LOT_CATEGORY = 2
	GROUP BY TANK.LOCATION
	  , concat(coalesce(left(cast(LOTWINE.BRAND_CODE as varchar)+replicate(' ',2),2), '  ') 
	  , coalesce(left(cast(LOTWINE.WINE_TYPE_CODE as varchar)+replicate(' ',3),3),'   ')
	  , coalesce(left(cast(LOTWINE.BLEND_VINTAGE as varchar)+replicate(' ',2),2),'  ')
	  , coalesce(left(concat(cast(LOTWINE.BLEND_STATUS_CODE as varchar),' '),1),' ')
	  , coalesce(left(cast(LOTWINE.APPELLATION_CODE as varchar)+replicate(' ',2),2),'  ')
	  , coalesce(left(cast(LOTWINE.VENDOR_CODE as varchar)+replicate(' ',3),3),'   ')
	  , coalesce(left(concat(cast(LOTWINE.BLEND_STATUS_TWO as varchar),' '),1),' ')
	  , LOTWINE.BLEND_LOT_NUMBER_USER)
	  , LOTWINE.PLANT_CODE
	  , LOTWINE.TANK_CODE
) B
	ON A.PLANT_CODE = B.PLANT_CODE
	 AND A.TANK_CODE = B.TANK_CODE
	 AND A.TANK_LOCATION = B.TANK_LOCATION
	 AND A.BLEND_ID = B.BLEND_ID
WHERE PERCENT_TRUE_GROWER_BLOCK > 5
  AND B.BRAND_IU_VOLUME <> 0

GO









