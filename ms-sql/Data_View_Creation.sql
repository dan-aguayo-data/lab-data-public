/* DROP EXISTING VIEW */
DROP VIEW IF EXISTS [DATA_WAREHOUSE].[V_REP_ActiveContainerAnalysis];
GO

/*
----Creation History-----
Date Created: 01/01/2023
Author: Data Engineer
Project: View of active non-empty containers and their analysis, readings, and blends filtered on regional processing tables.
This view was created to support the Operations Dashboard, replacing the legacy reporting view.
*/
CREATE VIEW [DATA_WAREHOUSE].[V_REP_ActiveContainerAnalysis] AS

SELECT
    VCW.FACILITY_CODE AS "Facility Code",
    VCW.CONTAINER_CODE AS "Container Code",
    VCW.BATCH_ID AS "Batch ID",
    VCW.BATCH_NOTE AS "Batch Note",
    X.INSPECTION_NOTE AS "Inspection Note",
    X.INSPECTION_DATE AS "Inspection Date",
    X.INSPECTION_TYPE AS "Inspection Type",
    X.INSPECTION_VALUE AS "Inspection Value",
    X.INSPECTION_METHOD_NAME AS "Inspection Method Name"
FROM (
    SELECT 
        COALESCE(t1.INSPECTION_METHOD, ' ') AS INSPECTION_METHOD,
        CASE
            WHEN t1.INSPECTION_METHOD = '0' THEN 'Manual'
            WHEN t1.INSPECTION_METHOD = '1' THEN 'Automated'
            WHEN t1.INSPECTION_METHOD = '2' THEN 'Sensor'
            WHEN t1.INSPECTION_METHOD = 'R' THEN 'RECEIVED'
            ELSE 'UNKNOWN'
        END AS INSPECTION_METHOD_NAME,
        t1.INSPECTION_TYPE,
        COALESCE(t1.DATE_KEY, 0) AS DATE_KEY,
        t1.INSPECTION_DATE,
        t1.INSPECTION_VALUE,
        COALESCE(t1.SEQUENCE_KEY, 0) AS SEQUENCE_KEY,
        t1.BATCH_REF,
        t1.FACILITY_CODE,
        t1.CONTAINER_CODE,
        t1.INSPECTION_ORDER_DESC - 1 AS INSPECTION_ORDER_DESC,
        CASE
            WHEN t1.INSPECTION_ORDER_DESC = 1 THEN 'CURRENT'
            WHEN t1.INSPECTION_ORDER_DESC = 2 THEN 'PREVIOUS'
            WHEN t1.INSPECTION_ORDER_DESC = 3 THEN '2ND_PREVIOUS'
            WHEN t1.INSPECTION_ORDER_DESC = 4 THEN '3RD_PREVIOUS'
            ELSE CAST(t1.INSPECTION_ORDER_DESC AS CHAR)
        END AS INSPECTION_ORDER_NAME,
        UTILITY.TIME_CONVERT(REC2.INSPECTION_TIME) AS INSPECTION_TIME,
        ISNULL(REC2.INSPECTION_ORDER_ID, 'NOT SET') AS INSPECTION_ORDER_ID,
        ISNULL(REC2.INSPECTION_NOTE, 'NO NOTES') AS INSPECTION_NOTE,
        ISNULL(REC2.UNIT_NUMBER, ' ') AS UNIT_NUMBER,
        t1.REGION AS REGION
    FROM (
        SELECT 
            REC3.INSPECTION_METHOD AS INSPECTION_METHOD,
            REC3.INSPECTION_TYPE AS INSPECTION_TYPE,
            REC3.INSPECTION_DATE AS DATE_KEY,
            UTILITY.DATE_CONVERT(REC3.INSPECTION_DATE) AS INSPECTION_DATE,
            REC3.INSPECTION_VALUE AS INSPECTION_VALUE,
            REC3.INSPECTION_SEQUENCE AS SEQUENCE_KEY,
            REC3.BATCH_REF AS BATCH_REF,
            REC3.FACILITY_CODE AS FACILITY_CODE,
            REC3.CONTAINER_CODE AS CONTAINER_CODE,
            ROW_NUMBER() OVER (PARTITION BY REC3.INSPECTION_TYPE, REC3.BATCH_REF ORDER BY REC3.INSPECTION_DATE DESC, REC3.INSPECTION_SEQUENCE DESC) AS INSPECTION_ORDER_DESC,
            REC3.REGION AS REGION
        FROM (SELECT NZ.*, 'NZ' REGION FROM {{ source('PROCESSING_NZ', 'INSPECTION_RECORDS') }} NZ) REC3
    ) t1
    LEFT OUTER JOIN (SELECT NZ.*, 'NZ' REGION FROM {{ source('PROCESSING_NZ', 'INSPECTION_DETAILS') }} NZ) REC2
        ON t1.BATCH_REF = REC2.BATCH_REF
        AND t1.FACILITY_CODE = REC2.FACILITY_CODE
        AND t1.CONTAINER_CODE = REC2.CONTAINER_CODE
        AND t1.REGION = REC2.REGION
        AND ISNULL(t1.DATE_KEY, 0) = ISNULL(REC2.INSPECTION_DATE, 0)
        AND ISNULL(t1.SEQUENCE_KEY, 0) = ISNULL(REC2.INSPECTION_SEQUENCE, 0)
        AND ISNULL(t1.INSPECTION_METHOD, ' ') = ISNULL(REC2.INSPECTION_METHOD, ' ')
    WHERE t1.INSPECTION_ORDER_DESC = 1 -- CURRENT ONLY
) X
INNER JOIN {{ ref('V_D_ActiveBatch') }} VCW
    ON VCW.BATCH_REF = X.BATCH_REF
    AND VCW.REGION = 'NZ';
GO

/* DROP SECOND VIEW */
DROP VIEW IF EXISTS [DATA_WAREHOUSE].[V_REP_ContainerActivityDates];
GO