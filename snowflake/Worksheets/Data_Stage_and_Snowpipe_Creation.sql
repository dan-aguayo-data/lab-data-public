-- MONITOR TABLE REFRESH STATUS USING COPY_HISTORY
WITH SOURCE AS (
  SELECT 
    SPLIT_PART(FILE_NAME, '/', 1) AS FILE_NAME, 
    LAST_LOAD_TIME, 
    PIPE_RECEIVED_TIME, 
    ERROR_COUNT
  FROM TABLE(
    my_project_db.information_schema.copy_history(
      TABLE_NAME => 'LANDING.PIPE_PROD.DATA_PIPE_TABLE', 
      START_TIME => DATEADD(minute, -60, CURRENT_TIMESTAMP())
    )
  )
)
SELECT
    COUNT(ctrl.table_name) AS NUM_TABLES_TO_CHECK,
    SUM(CASE WHEN src.FILE_NAME IS NOT NULL THEN 1 ELSE 0 END) AS TABLES_REFRESHED
FROM REF_DB.AUDIT.TABLE_REFRESH_CONTROL ctrl
LEFT JOIN SOURCE src
    ON LOWER(ctrl.table_name) = src.FILE_NAME;

-- CREATE BRONZE INGESTION TABLE FOR JSON DATA
CREATE OR REPLACE TABLE LANDING.PIPE_PROD.DATA_INGEST (
    FILE_NAME VARCHAR,
    FILE_ROW_NUMBER NUMBER,
    LANDED_DATETIME TIMESTAMP_NTZ,
    MESSAGE VARIANT
) COMMENT='BRONZE table for landing JSON payloads from Azure Blob via Snowpipe.';

GRANT SELECT ON TABLE LANDING.PIPE_PROD.DATA_INGEST TO ROLE INGEST_ROLE;
GRANT SELECT ON TABLE LANDING.PIPE_PROD.DATA_INGEST TO ROLE DATA_ENGINEER_ROLE;

-- CREATE & INSPECT STAGE
CREATE OR REPLACE STAGE BLOB_STAGE
    URL='azure://storageaccount.blob.core.windows.net/container-name/prefix/'
    CREDENTIALS = (AZURE_SAS_TOKEN='your_sanitized_sas_token')
    FILE_FORMAT = (TYPE=JSON);

DESC STAGE BLOB_STAGE;
SHOW FILES IN STAGE BLOB_STAGE;
LS @LANDING.PIPE_PROD.BLOB_STAGE;

-- FILTER BY FILE PATTERN
LS @"LANDING"."PIPE_PROD"."BLOB_STAGE" PATTERN='.*users/.*.json';
LS @"LANDING"."PIPE_PROD"."BLOB_STAGE" PATTERN='.*groupmembers/.*.json';

-- TEST STAGE PREVIEW WITH JSON VARIANT
SELECT 
    METADATA$FILENAME, 
    METADATA$FILE_ROW_NUMBER, 
    CURRENT_TIMESTAMP, 
    t.$1::VARIANT 
FROM @LANDING.PIPE_PROD.BLOB_STAGE (pattern => '.*users/.*.json') t;

-- COPY INTO THE INGEST TABLE
COPY INTO LANDING.PIPE_PROD.DATA_INGEST (
    FILE_NAME, FILE_ROW_NUMBER, LANDED_DATETIME, MESSAGE
)
FROM (
    SELECT 
        METADATA$FILENAME, 
        METADATA$FILE_ROW_NUMBER, 
        CURRENT_TIMESTAMP, 
        t.$1::VARIANT
    FROM @LANDING.PIPE_PROD.BLOB_STAGE (pattern => '.*.json') t
)
FILE_FORMAT = (TYPE = JSON, COMPRESSION = AUTO)
ON_ERROR = 'SKIP_FILE';

-- BASIC VIEW OF LANDED DATA
SELECT 
    SPLIT_PART(FILE_NAME, '/', 3) AS FOLDER_NAME,
    *
FROM LANDING.PIPE_PROD.DATA_INGEST
ORDER BY FOLDER_NAME;

-- CREATE NOTIFICATION INTEGRATION
CREATE OR REPLACE NOTIFICATION INTEGRATION BLOB_STORAGE_NOTIFICATION
    ENABLED = TRUE
    TYPE = QUEUE
    NOTIFICATION_PROVIDER = AZURE_STORAGE_QUEUE
    AZURE_STORAGE_QUEUE_PRIMARY_URI = 'https://storageaccount.queue.core.windows.net/queue-name'
    AZURE_TENANT_ID = 'your-tenant-id';

DESC NOTIFICATION INTEGRATION BLOB_STORAGE_NOTIFICATION;

-- CREATE PIPE FOR AUTO-INGESTION
CREATE OR REPLACE PIPE LANDING.PIPE_PROD.DATA_PIPE
    AUTO_INGEST = TRUE
    INTEGRATION = 'BLOB_STORAGE_NOTIFICATION'
    AS
    COPY INTO LANDING.PIPE_PROD.DATA_INGEST (
        FILE_NAME, FILE_ROW_NUMBER, LANDED_DATETIME, MESSAGE
    )
    FROM (
        SELECT 
            METADATA$FILENAME, 
            METADATA$FILE_ROW_NUMBER, 
            CURRENT_TIMESTAMP, 
            t.$1::VARIANT
        FROM @LANDING.PIPE_PROD.BLOB_STAGE (pattern => '.*.json') t
    )
    FILE_FORMAT = (TYPE = JSON, COMPRESSION = AUTO)
    ON_ERROR = 'SKIP_FILE';

-- CHECK PIPE STATUS
SELECT SYSTEM$PIPE_STATUS('LANDING.PIPE_PROD.DATA_PIPE');
