WITH OPTIMIZED_TABLE AS (
  SELECT 
      MULTI_SCHEME_ID, SCHEME, CONCAT(COALESCE(TO_CHAR(ID),''), '-', COALESCE(TO_CHAR(LINE_NUM),''))  AS ID, ID AS KAFKA_ID, 
      POS_TXN_NUM, TRANSACTION_TYPE, PAYMENT_METHOD, CONSUMER_ID, CONSUMER_NAME, PAYMENT_ID,
      RECIPIENT_PARTICIPANT_NUMBER, RECIPIENT_SITE_NUMBER, RECIPIENT_NAME, RECIPIENT_TYPE, 
      CRP_SITE_NUMBER, CRP_SITE_NAME, SITE_CONTRACT_MANAGER_NAME, EMAIL, PO_COMMUNICATION_EMAIL, 
      MATERIAL_TYPE_ID, LINE_NUM, PAYMENT_PERIOD, PERIOD, AMOUNT_TO_PAY, VOLUME, GROSS_AMOUNT, 
      VOID_STATUS, PAY_REF_NUMBER, PAID, INVOICED, ERP_PAID, PAYMENT_AMOUNT,  
      CREATED_BY, CREATED_ON, CREATED_ON_UTC, LAST_MODIFIED_BY, LAST_MODIFIED_ON_UTC, 
      APPROVAL_FLAG, WF_RULES_PASSED, PAYRUN_STATUS, PAYRUN_CREATED_ON, TODAY_ORDER, 
      PAYRUN_ON_THE_PORTAL, TODAY_NEW_PAYMENT_FLAG, PAID_DATE, PAID_DATE_KEY, VOID, 
      VOIDED_DATE, PAYMENT_STATUS, APPROVAL_STATUS, CURRENT_APPROVAL_LEVEL, 
      APPROVAL_LAST_MODIFIED_ON_SYD, COMPLETE_STATUS, NOTIFICATION_ID, ERP_PAYMENT_STATUS, 
      INVOICE_AMOUNT, INVOICE_NUMBER_AND_STATUS, INVOICE_STATUS, NOTIFICATION_ID_ASSIGNED_FLAG, 
      WORKFLOW_STATUS, ERP_INVOICE_STATUS_VOID, ERP_PAYMENT_STATUS_VOID, PAYMENT_STATUS_VOID, 
      AMOUNT_TO_PAY_HEADER, GROSS_AMOUNT_HEADER, VOLUME_HEADER, NUMBER_OF_TRANSACTIONS_HEADER, 
      PYMT_AMOUNT_RECENT_FLAG, RECONCILIATION_FLAG, RECONCILIATION_FLAG_SIMPLE
  FROM RAW_DEV.TEST.FIN_RTP_KAFKA_V_TMP
), 
CURRENT_TABLE AS (
  SELECT 
      MULTI_SCHEME_ID, SCHEME, CONCAT(COALESCE(TO_CHAR(ID),''), '-', COALESCE(TO_CHAR(LINE_NUM),''))  AS ID, ID AS KAFKA_ID, 
      POS_TXN_NUM, TRANSACTION_TYPE, PAYMENT_METHOD, CONSUMER_ID, CONSUMER_NAME, 
      RECIPIENT_PARTICIPANT_NUMBER, RECIPIENT_SITE_NUMBER, RECIPIENT_NAME, RECIPIENT_TYPE, 
      CRP_SITE_NUMBER, CRP_SITE_NAME, SITE_CONTRACT_MANAGER_NAME, EMAIL, PO_COMMUNICATION_EMAIL, 
      MATERIAL_TYPE_ID, LINE_NUM, PAYMENT_PERIOD, PERIOD, AMOUNT_TO_PAY, VOLUME, GROSS_AMOUNT, 
      VOID_STATUS, PAY_REF_NUMBER, PAID, INVOICED, ERP_PAID, PAYMENT_AMOUNT, 
      CREATED_BY, CREATED_ON, CREATED_ON_UTC, LAST_MODIFIED_BY, LAST_MODIFIED_ON_UTC, 
      APPROVAL_FLAG, WF_RULES_PASSED, PAYRUN_STATUS, PAYRUN_CREATED_ON, TODAY_ORDER, 
      PAYRUN_ON_THE_PORTAL, TODAY_NEW_PAYMENT_FLAG, PAID_DATE, PAID_DATE_KEY, VOID, 
      VOIDED_DATE, PAYMENT_STATUS, APPROVAL_STATUS, CURRENT_APPROVAL_LEVEL, 
      APPROVAL_LAST_MODIFIED_ON_SYD, COMPLETE_STATUS, NOTIFICATION_ID, ERP_PAYMENT_STATUS, 
      INVOICE_AMOUNT, INVOICE_NUMBER_AND_STATUS, INVOICE_STATUS, NOTIFICATION_ID_ASSIGNED_FLAG, 
      WORKFLOW_STATUS, ERP_INVOICE_STATUS_VOID, ERP_PAYMENT_STATUS_VOID, PAYMENT_STATUS_VOID, 
      AMOUNT_TO_PAY_HEADER, GROSS_AMOUNT_HEADER, VOLUME_HEADER, NUMBER_OF_TRANSACTIONS_HEADER, 
      PYMT_AMOUNT_RECENT_FLAG, RECONCILIATION_FLAG, RECONCILIATION_FLAG_SIMPLE
  FROM COMMON_PROD.DWH.FIN_RTP_KAFKA_V
)
SELECT 
    COALESCE(a.ID, b.ID)                     AS ID,

CASE 
            WHEN a.ID IS NULL THEN 'Missing in TMP'
            WHEN b.ID IS NULL THEN 'Missing in PROD'
            WHEN 
                 a.MULTI_SCHEME_ID IS DISTINCT FROM b.MULTI_SCHEME_ID OR
                 a.SCHEME IS DISTINCT FROM b.SCHEME OR
                 a.KAFKA_ID IS DISTINCT FROM b.KAFKA_ID OR
                 a.POS_TXN_NUM IS DISTINCT FROM b.POS_TXN_NUM OR
                 a.TRANSACTION_TYPE IS DISTINCT FROM b.TRANSACTION_TYPE OR
                 a.PAYMENT_METHOD IS DISTINCT FROM b.PAYMENT_METHOD OR
                 a.CONSUMER_ID IS DISTINCT FROM b.CONSUMER_ID OR
                 a.CONSUMER_NAME IS DISTINCT FROM b.CONSUMER_NAME OR
                 a.RECIPIENT_PARTICIPANT_NUMBER IS DISTINCT FROM b.RECIPIENT_PARTICIPANT_NUMBER OR
                 a.RECIPIENT_SITE_NUMBER IS DISTINCT FROM b.RECIPIENT_SITE_NUMBER OR
                 a.RECIPIENT_NAME IS DISTINCT FROM b.RECIPIENT_NAME OR
                 a.RECIPIENT_TYPE IS DISTINCT FROM b.RECIPIENT_TYPE OR
                 a.CRP_SITE_NUMBER IS DISTINCT FROM b.CRP_SITE_NUMBER OR
                 a.CRP_SITE_NAME IS DISTINCT FROM b.CRP_SITE_NAME OR
                 a.SITE_CONTRACT_MANAGER_NAME IS DISTINCT FROM b.SITE_CONTRACT_MANAGER_NAME OR
                 a.EMAIL IS DISTINCT FROM b.EMAIL OR
                 a.PO_COMMUNICATION_EMAIL IS DISTINCT FROM b.PO_COMMUNICATION_EMAIL OR
                 a.MATERIAL_TYPE_ID IS DISTINCT FROM b.MATERIAL_TYPE_ID OR
                 a.LINE_NUM IS DISTINCT FROM b.LINE_NUM OR
                 a.PAYMENT_PERIOD IS DISTINCT FROM b.PAYMENT_PERIOD OR
                 a.PERIOD IS DISTINCT FROM b.PERIOD OR
                 a.AMOUNT_TO_PAY IS DISTINCT FROM b.AMOUNT_TO_PAY OR
                 a.VOLUME IS DISTINCT FROM b.VOLUME OR
                 a.GROSS_AMOUNT IS DISTINCT FROM b.GROSS_AMOUNT OR
                 a.VOID_STATUS IS DISTINCT FROM b.VOID_STATUS OR
                 a.PAY_REF_NUMBER IS DISTINCT FROM b.PAY_REF_NUMBER OR
                 a.PAID IS DISTINCT FROM b.PAID OR
                 a.INVOICED IS DISTINCT FROM b.INVOICED OR
                 a.ERP_PAID IS DISTINCT FROM b.ERP_PAID OR
                 a.PAYMENT_AMOUNT IS DISTINCT FROM b.PAYMENT_AMOUNT OR
                 --ROUND(CAST(A.PAYMENT_LINE_AGG AS DECIMAL(18,1)),1) IS DISTINCT FROM ROUND(CAST(B.PAYMENT_LINE_AGG AS DECIMAL(18,1)),1) OR
                 -- ABS(a.PAYMENT_LINE_AGG - b.PAYMENT_LINE_AGG) > 0.1 OR
                 a.CREATED_BY IS DISTINCT FROM b.CREATED_BY OR
                 a.CREATED_ON IS DISTINCT FROM b.CREATED_ON OR
                 a.CREATED_ON_UTC IS DISTINCT FROM b.CREATED_ON_UTC OR
                 a.LAST_MODIFIED_BY IS DISTINCT FROM b.LAST_MODIFIED_BY OR
                 a.LAST_MODIFIED_ON_UTC IS DISTINCT FROM b.LAST_MODIFIED_ON_UTC OR
                 a.APPROVAL_FLAG IS DISTINCT FROM b.APPROVAL_FLAG OR
                 a.WF_RULES_PASSED IS DISTINCT FROM b.WF_RULES_PASSED OR
                 a.PAYRUN_STATUS IS DISTINCT FROM b.PAYRUN_STATUS OR
                 a.PAYRUN_CREATED_ON IS DISTINCT FROM b.PAYRUN_CREATED_ON OR
                 a.TODAY_ORDER IS DISTINCT FROM b.TODAY_ORDER OR
                 a.PAYRUN_ON_THE_PORTAL IS DISTINCT FROM b.PAYRUN_ON_THE_PORTAL OR
                 a.TODAY_NEW_PAYMENT_FLAG IS DISTINCT FROM b.TODAY_NEW_PAYMENT_FLAG OR
                 a.PAID_DATE IS DISTINCT FROM b.PAID_DATE OR
                 a.PAID_DATE_KEY IS DISTINCT FROM b.PAID_DATE_KEY OR
                 a.VOID IS DISTINCT FROM b.VOID OR
                 a.VOIDED_DATE IS DISTINCT FROM b.VOIDED_DATE OR
                 a.PAYMENT_STATUS IS DISTINCT FROM b.PAYMENT_STATUS OR
                 a.APPROVAL_STATUS IS DISTINCT FROM b.APPROVAL_STATUS OR
                 a.CURRENT_APPROVAL_LEVEL IS DISTINCT FROM b.CURRENT_APPROVAL_LEVEL OR
                 a.APPROVAL_LAST_MODIFIED_ON_SYD IS DISTINCT FROM b.APPROVAL_LAST_MODIFIED_ON_SYD OR
                 a.COMPLETE_STATUS IS DISTINCT FROM b.COMPLETE_STATUS OR
                 a.NOTIFICATION_ID IS DISTINCT FROM b.NOTIFICATION_ID OR
                 a.ERP_PAYMENT_STATUS IS DISTINCT FROM b.ERP_PAYMENT_STATUS OR
                 ROUND(CAST(a.INVOICE_AMOUNT AS DECIMAL(18,1)),1) IS DISTINCT FROM ROUND(CAST(b.INVOICE_AMOUNT AS DECIMAL(18,1)),1) OR
                 a.INVOICE_NUMBER_AND_STATUS IS DISTINCT FROM b.INVOICE_NUMBER_AND_STATUS OR
                 a.INVOICE_STATUS IS DISTINCT FROM b.INVOICE_STATUS OR
                 a.NOTIFICATION_ID_ASSIGNED_FLAG IS DISTINCT FROM b.NOTIFICATION_ID_ASSIGNED_FLAG OR
                 a.WORKFLOW_STATUS IS DISTINCT FROM b.WORKFLOW_STATUS OR
                 a.ERP_INVOICE_STATUS_VOID IS DISTINCT FROM b.ERP_INVOICE_STATUS_VOID OR
                 a.ERP_PAYMENT_STATUS_VOID IS DISTINCT FROM b.ERP_PAYMENT_STATUS_VOID OR
                 a.PAYMENT_STATUS_VOID IS DISTINCT FROM b.PAYMENT_STATUS_VOID OR
                 a.AMOUNT_TO_PAY_HEADER IS DISTINCT FROM b.AMOUNT_TO_PAY_HEADER OR
                 a.GROSS_AMOUNT_HEADER IS DISTINCT FROM b.GROSS_AMOUNT_HEADER OR
                 a.VOLUME_HEADER IS DISTINCT FROM b.VOLUME_HEADER OR
                 a.NUMBER_OF_TRANSACTIONS_HEADER IS DISTINCT FROM b.NUMBER_OF_TRANSACTIONS_HEADER OR
                 a.PYMT_AMOUNT_RECENT_FLAG IS DISTINCT FROM b.PYMT_AMOUNT_RECENT_FLAG OR
                 a.RECONCILIATION_FLAG IS DISTINCT FROM b.RECONCILIATION_FLAG OR
                 a.RECONCILIATION_FLAG_SIMPLE IS DISTINCT FROM b.RECONCILIATION_FLAG_SIMPLE
            THEN 'Mismatch in values'
            ELSE 'Match'
        END AS STATUS,
        LISTAGG(
               CASE WHEN a.MULTI_SCHEME_ID IS DISTINCT FROM b.MULTI_SCHEME_ID THEN 'MULTI_SCHEME_ID,' ELSE '' END
             || CASE WHEN a.SCHEME IS DISTINCT FROM b.SCHEME THEN 'SCHEME,' ELSE '' END
             || CASE WHEN a.KAFKA_ID IS DISTINCT FROM b.KAFKA_ID THEN 'KAFKA_ID,' ELSE '' END
             || CASE WHEN a.POS_TXN_NUM IS DISTINCT FROM b.POS_TXN_NUM THEN 'POS_TXN_NUM,' ELSE '' END
             || CASE WHEN a.TRANSACTION_TYPE IS DISTINCT FROM b.TRANSACTION_TYPE THEN 'TRANSACTION_TYPE,' ELSE '' END
             || CASE WHEN a.PAYMENT_METHOD IS DISTINCT FROM b.PAYMENT_METHOD THEN 'PAYMENT_METHOD,' ELSE '' END
             || CASE WHEN a.CONSUMER_ID IS DISTINCT FROM b.CONSUMER_ID THEN 'CONSUMER_ID,' ELSE '' END
             || CASE WHEN a.CONSUMER_NAME IS DISTINCT FROM b.CONSUMER_NAME THEN 'CONSUMER_NAME,' ELSE '' END
             || CASE WHEN a.RECIPIENT_PARTICIPANT_NUMBER IS DISTINCT FROM b.RECIPIENT_PARTICIPANT_NUMBER THEN 'RECIPIENT_PARTICIPANT_NUMBER,' ELSE '' END
             || CASE WHEN a.RECIPIENT_SITE_NUMBER IS DISTINCT FROM b.RECIPIENT_SITE_NUMBER THEN 'RECIPIENT_SITE_NUMBER,' ELSE '' END
             || CASE WHEN a.RECIPIENT_NAME IS DISTINCT FROM b.RECIPIENT_NAME THEN 'RECIPIENT_NAME,' ELSE '' END
             || CASE WHEN a.RECIPIENT_TYPE IS DISTINCT FROM b.RECIPIENT_TYPE THEN 'RECIPIENT_TYPE,' ELSE '' END
             || CASE WHEN a.CRP_SITE_NUMBER IS DISTINCT FROM b.CRP_SITE_NUMBER THEN 'CRP_SITE_NUMBER,' ELSE '' END
             || CASE WHEN a.CRP_SITE_NAME IS DISTINCT FROM b.CRP_SITE_NAME THEN 'CRP_SITE_NAME,' ELSE '' END
             || CASE WHEN a.SITE_CONTRACT_MANAGER_NAME IS DISTINCT FROM b.SITE_CONTRACT_MANAGER_NAME THEN 'SITE_CONTRACT_MANAGER_NAME,' ELSE '' END
             || CASE WHEN a.EMAIL IS DISTINCT FROM b.EMAIL THEN 'EMAIL,' ELSE '' END
             || CASE WHEN a.PO_COMMUNICATION_EMAIL IS DISTINCT FROM b.PO_COMMUNICATION_EMAIL THEN 'PO_COMMUNICATION_EMAIL,' ELSE '' END
             || CASE WHEN a.MATERIAL_TYPE_ID IS DISTINCT FROM b.MATERIAL_TYPE_ID THEN 'MATERIAL_TYPE_ID,' ELSE '' END
             || CASE WHEN a.LINE_NUM IS DISTINCT FROM b.LINE_NUM THEN 'LINE_NUM,' ELSE '' END
             || CASE WHEN a.PAYMENT_PERIOD IS DISTINCT FROM b.PAYMENT_PERIOD THEN 'PAYMENT_PERIOD,' ELSE '' END
             || CASE WHEN a.PERIOD IS DISTINCT FROM b.PERIOD THEN 'PERIOD,' ELSE '' END
             || CASE WHEN a.AMOUNT_TO_PAY IS DISTINCT FROM b.AMOUNT_TO_PAY THEN 'AMOUNT_TO_PAY,' ELSE '' END
             || CASE WHEN a.VOLUME IS DISTINCT FROM b.VOLUME THEN 'VOLUME,' ELSE '' END
             || CASE WHEN a.GROSS_AMOUNT IS DISTINCT FROM b.GROSS_AMOUNT THEN 'GROSS_AMOUNT,' ELSE '' END
             || CASE WHEN a.VOID_STATUS IS DISTINCT FROM b.VOID_STATUS THEN 'VOID_STATUS,' ELSE '' END
             || CASE WHEN a.PAY_REF_NUMBER IS DISTINCT FROM b.PAY_REF_NUMBER THEN 'PAY_REF_NUMBER,' ELSE '' END
             || CASE WHEN a.PAID IS DISTINCT FROM b.PAID THEN 'PAID,' ELSE '' END
             || CASE WHEN a.INVOICED IS DISTINCT FROM b.INVOICED THEN 'INVOICED,' ELSE '' END
             || CASE WHEN a.ERP_PAID IS DISTINCT FROM b.ERP_PAID THEN 'ERP_PAID,' ELSE '' END
             || CASE WHEN a.PAYMENT_AMOUNT IS DISTINCT FROM b.PAYMENT_AMOUNT THEN 'PAYMENT_AMOUNT,' ELSE '' END
             -- || CASE WHEN ABS(a.PAYMENT_LINE_AGG - b.PAYMENT_LINE_AGG) > 0.1   THEN 'PAYMENT_LINE_AGG,' ELSE '' END
             || CASE WHEN a.CREATED_BY IS DISTINCT FROM b.CREATED_BY THEN 'CREATED_BY,' ELSE '' END
             || CASE WHEN a.CREATED_ON IS DISTINCT FROM b.CREATED_ON THEN 'CREATED_ON,' ELSE '' END
             || CASE WHEN a.CREATED_ON_UTC IS DISTINCT FROM b.CREATED_ON_UTC THEN 'CREATED_ON_UTC,' ELSE '' END
             || CASE WHEN a.LAST_MODIFIED_BY IS DISTINCT FROM b.LAST_MODIFIED_BY THEN 'LAST_MODIFIED_BY,' ELSE '' END
             || CASE WHEN a.LAST_MODIFIED_ON_UTC IS DISTINCT FROM b.LAST_MODIFIED_ON_UTC THEN 'LAST_MODIFIED_ON_UTC,' ELSE '' END
             || CASE WHEN a.APPROVAL_FLAG IS DISTINCT FROM b.APPROVAL_FLAG THEN 'APPROVAL_FLAG,' ELSE '' END
             || CASE WHEN a.WF_RULES_PASSED IS DISTINCT FROM b.WF_RULES_PASSED THEN 'WF_RULES_PASSED,' ELSE '' END
             || CASE WHEN a.PAYRUN_STATUS IS DISTINCT FROM b.PAYRUN_STATUS THEN 'PAYRUN_STATUS,' ELSE '' END
             || CASE WHEN a.PAYRUN_CREATED_ON IS DISTINCT FROM b.PAYRUN_CREATED_ON THEN 'PAYRUN_CREATED_ON,' ELSE '' END
             || CASE WHEN a.TODAY_ORDER IS DISTINCT FROM b.TODAY_ORDER THEN 'TODAY_ORDER,' ELSE '' END
             || CASE WHEN a.PAYRUN_ON_THE_PORTAL IS DISTINCT FROM b.PAYRUN_ON_THE_PORTAL THEN 'PAYRUN_ON_THE_PORTAL,' ELSE '' END
             || CASE WHEN a.TODAY_NEW_PAYMENT_FLAG IS DISTINCT FROM b.TODAY_NEW_PAYMENT_FLAG THEN 'TODAY_NEW_PAYMENT_FLAG,' ELSE '' END
             || CASE WHEN a.PAID_DATE IS DISTINCT FROM b.PAID_DATE THEN 'PAID_DATE,' ELSE '' END
             || CASE WHEN a.PAID_DATE_KEY IS DISTINCT FROM b.PAID_DATE_KEY THEN 'PAID_DATE_KEY,' ELSE '' END
             || CASE WHEN a.VOID IS DISTINCT FROM b.VOID THEN 'VOID,' ELSE '' END
             || CASE WHEN a.VOIDED_DATE IS DISTINCT FROM b.VOIDED_DATE THEN 'VOIDED_DATE,' ELSE '' END
             || CASE WHEN a.PAYMENT_STATUS IS DISTINCT FROM b.PAYMENT_STATUS THEN 'PAYMENT_STATUS,' ELSE '' END
             || CASE WHEN a.APPROVAL_STATUS IS DISTINCT FROM b.APPROVAL_STATUS THEN 'APPROVAL_STATUS,' ELSE '' END
             || CASE WHEN a.CURRENT_APPROVAL_LEVEL IS DISTINCT FROM b.CURRENT_APPROVAL_LEVEL THEN 'CURRENT_APPROVAL_LEVEL,' ELSE '' END
             || CASE WHEN a.APPROVAL_LAST_MODIFIED_ON_SYD IS DISTINCT FROM b.APPROVAL_LAST_MODIFIED_ON_SYD THEN 'APPROVAL_LAST_MODIFIED_ON_SYD,' ELSE '' END
             || CASE WHEN a.COMPLETE_STATUS IS DISTINCT FROM b.COMPLETE_STATUS THEN 'COMPLETE_STATUS,' ELSE '' END
             || CASE WHEN a.NOTIFICATION_ID IS DISTINCT FROM b.NOTIFICATION_ID THEN 'NOTIFICATION_ID,' ELSE '' END
             || CASE WHEN a.ERP_PAYMENT_STATUS IS DISTINCT FROM b.ERP_PAYMENT_STATUS THEN 'ERP_PAYMENT_STATUS,' ELSE '' END
             || CASE WHEN ROUND(CAST(a.INVOICE_AMOUNT AS DECIMAL(18,1)),1) IS DISTINCT FROM ROUND(CAST(b.INVOICE_AMOUNT AS DECIMAL(18,1)),1)  THEN 'INVOICE_AMOUNT,' ELSE '' END
             || CASE WHEN a.INVOICE_NUMBER_AND_STATUS IS DISTINCT FROM b.INVOICE_NUMBER_AND_STATUS THEN 'INVOICE_NUMBER_AND_STATUS,' ELSE '' END
             || CASE WHEN a.INVOICE_STATUS IS DISTINCT FROM b.INVOICE_STATUS THEN 'INVOICE_STATUS,' ELSE '' END
             || CASE WHEN a.NOTIFICATION_ID_ASSIGNED_FLAG IS DISTINCT FROM b.NOTIFICATION_ID_ASSIGNED_FLAG THEN 'NOTIFICATION_ID_ASSIGNED_FLAG,' ELSE '' END
             || CASE WHEN a.WORKFLOW_STATUS IS DISTINCT FROM b.WORKFLOW_STATUS THEN 'WORKFLOW_STATUS,' ELSE '' END
             || CASE WHEN a.ERP_INVOICE_STATUS_VOID IS DISTINCT FROM b.ERP_INVOICE_STATUS_VOID THEN 'ERP_INVOICE_STATUS_VOID,' ELSE '' END
             || CASE WHEN a.ERP_PAYMENT_STATUS_VOID IS DISTINCT FROM b.ERP_PAYMENT_STATUS_VOID THEN 'ERP_PAYMENT_STATUS_VOID,' ELSE '' END
             || CASE WHEN a.PAYMENT_STATUS_VOID IS DISTINCT FROM b.PAYMENT_STATUS_VOID THEN 'PAYMENT_STATUS_VOID,' ELSE '' END
             || CASE WHEN a.AMOUNT_TO_PAY_HEADER IS DISTINCT FROM b.AMOUNT_TO_PAY_HEADER THEN 'AMOUNT_TO_PAY_HEADER,' ELSE '' END
             || CASE WHEN a.GROSS_AMOUNT_HEADER IS DISTINCT FROM b.GROSS_AMOUNT_HEADER THEN 'GROSS_AMOUNT_HEADER,' ELSE '' END
             || CASE WHEN a.VOLUME_HEADER IS DISTINCT FROM b.VOLUME_HEADER THEN 'VOLUME_HEADER,' ELSE '' END
             || CASE WHEN a.NUMBER_OF_TRANSACTIONS_HEADER IS DISTINCT FROM b.NUMBER_OF_TRANSACTIONS_HEADER THEN 'NUMBER_OF_TRANSACTIONS_HEADER,' ELSE '' END
             || CASE WHEN a.PYMT_AMOUNT_RECENT_FLAG IS DISTINCT FROM b.PYMT_AMOUNT_RECENT_FLAG THEN 'PYMT_AMOUNT_RECENT_FLAG,' ELSE '' END
             || CASE WHEN a.RECONCILIATION_FLAG IS DISTINCT FROM b.RECONCILIATION_FLAG THEN 'RECONCILIATION_FLAG,' ELSE '' END
             || CASE WHEN a.RECONCILIATION_FLAG_SIMPLE IS DISTINCT FROM b.RECONCILIATION_FLAG_SIMPLE THEN 'RECONCILIATION_FLAG_SIMPLE,' ELSE '' END
             , ''
        ) WITHIN GROUP (ORDER BY 1) AS DIFF_COLUMNS,
    
    a.ID                AS ID_NEW, 
    b.ID                AS ID_OLD,
    COALESCE(a.PAYMENT_ID,'') AS PAYMENT_ID,
    a.LAST_MODIFIED_ON_UTC AS LAST_MODIFIED_NEW,
    b.LAST_MODIFIED_ON_UTC AS LAST_MODIFIED_CURRENT,
    TO_TIMESTAMP_NTZ(CONVERT_TIMEZONE('UTC', CURRENT_TIMESTAMP) - INTERVAL '1 HOURS') AS utc_minus_1hrs
    --,CAST(A.PAYMENT_LINE_AGG AS DECIMAL(18,1)) NEW_PAYMENT_LINE_AGG
    --,CAST(B.PAYMENT_LINE_AGG AS DECIMAL(18,1)) OLD_PAYMENT_LINE_AGG
    ,A.CREATED_BY AS NEW_MODIFIED_BY
    ,B.CREATED_BY AS OLD_MODIFIED_BY
    ,A.CREATED_ON_UTC AS NEW_CREATED_ON_UTC
    ,B.CREATED_ON_UTC AS OLD_CREATED_ON_UTC
    -- ,
    -- a.*,
    -- b.*
FROM OPTIMIZED_TABLE a
FULL OUTER JOIN CURRENT_TABLE b 
    ON a.ID = b.ID
WHERE  
    a.LAST_MODIFIED_ON_UTC <= TO_TIMESTAMP_NTZ(CONVERT_TIMEZONE('UTC', CURRENT_TIMESTAMP) - INTERVAL '6 HOURS')
    AND b.LAST_MODIFIED_ON_UTC <= TO_TIMESTAMP_NTZ(CONVERT_TIMEZONE('UTC', CURRENT_TIMESTAMP) - INTERVAL '6 HOURS')
    AND CASE 
            WHEN a.ID IS NULL THEN 'Missing in TMP'
            WHEN b.ID IS NULL THEN 'Missing in PROD'
            WHEN 
                 a.MULTI_SCHEME_ID IS DISTINCT FROM b.MULTI_SCHEME_ID OR
                 a.SCHEME IS DISTINCT FROM b.SCHEME OR
                 a.KAFKA_ID IS DISTINCT FROM b.KAFKA_ID OR
                 a.POS_TXN_NUM IS DISTINCT FROM b.POS_TXN_NUM OR
                 a.TRANSACTION_TYPE IS DISTINCT FROM b.TRANSACTION_TYPE OR
                 a.PAYMENT_METHOD IS DISTINCT FROM b.PAYMENT_METHOD OR
                 a.CONSUMER_ID IS DISTINCT FROM b.CONSUMER_ID OR
                 a.CONSUMER_NAME IS DISTINCT FROM b.CONSUMER_NAME OR
                 a.RECIPIENT_PARTICIPANT_NUMBER IS DISTINCT FROM b.RECIPIENT_PARTICIPANT_NUMBER OR
                 a.RECIPIENT_SITE_NUMBER IS DISTINCT FROM b.RECIPIENT_SITE_NUMBER OR
                 a.RECIPIENT_NAME IS DISTINCT FROM b.RECIPIENT_NAME OR
                 a.RECIPIENT_TYPE IS DISTINCT FROM b.RECIPIENT_TYPE OR
                 a.CRP_SITE_NUMBER IS DISTINCT FROM b.CRP_SITE_NUMBER OR
                 a.CRP_SITE_NAME IS DISTINCT FROM b.CRP_SITE_NAME OR
                 a.SITE_CONTRACT_MANAGER_NAME IS DISTINCT FROM b.SITE_CONTRACT_MANAGER_NAME OR
                 a.EMAIL IS DISTINCT FROM b.EMAIL OR
                 a.PO_COMMUNICATION_EMAIL IS DISTINCT FROM b.PO_COMMUNICATION_EMAIL OR
                 a.MATERIAL_TYPE_ID IS DISTINCT FROM b.MATERIAL_TYPE_ID OR
                 a.LINE_NUM IS DISTINCT FROM b.LINE_NUM OR
                 a.PAYMENT_PERIOD IS DISTINCT FROM b.PAYMENT_PERIOD OR
                 a.PERIOD IS DISTINCT FROM b.PERIOD OR
                 a.AMOUNT_TO_PAY IS DISTINCT FROM b.AMOUNT_TO_PAY OR
                 a.VOLUME IS DISTINCT FROM b.VOLUME OR
                 a.GROSS_AMOUNT IS DISTINCT FROM b.GROSS_AMOUNT OR
                 a.VOID_STATUS IS DISTINCT FROM b.VOID_STATUS OR
                 a.PAY_REF_NUMBER IS DISTINCT FROM b.PAY_REF_NUMBER OR
                 a.PAID IS DISTINCT FROM b.PAID OR
                 a.INVOICED IS DISTINCT FROM b.INVOICED OR
                 a.ERP_PAID IS DISTINCT FROM b.ERP_PAID OR
                 a.PAYMENT_AMOUNT IS DISTINCT FROM b.PAYMENT_AMOUNT OR
                -- ABS(a.PAYMENT_LINE_AGG - b.PAYMENT_LINE_AGG) > 0.1  OR
                 a.CREATED_BY IS DISTINCT FROM b.CREATED_BY OR
                 a.CREATED_ON IS DISTINCT FROM b.CREATED_ON OR
                 a.CREATED_ON_UTC IS DISTINCT FROM b.CREATED_ON_UTC OR
                 a.LAST_MODIFIED_BY IS DISTINCT FROM b.LAST_MODIFIED_BY OR
                 a.LAST_MODIFIED_ON_UTC IS DISTINCT FROM b.LAST_MODIFIED_ON_UTC OR
                 a.APPROVAL_FLAG IS DISTINCT FROM b.APPROVAL_FLAG OR
                 a.WF_RULES_PASSED IS DISTINCT FROM b.WF_RULES_PASSED OR
                 a.PAYRUN_STATUS IS DISTINCT FROM b.PAYRUN_STATUS OR
                 a.PAYRUN_CREATED_ON IS DISTINCT FROM b.PAYRUN_CREATED_ON OR
                 a.TODAY_ORDER IS DISTINCT FROM b.TODAY_ORDER OR
                 a.PAYRUN_ON_THE_PORTAL IS DISTINCT FROM b.PAYRUN_ON_THE_PORTAL OR
                 a.TODAY_NEW_PAYMENT_FLAG IS DISTINCT FROM b.TODAY_NEW_PAYMENT_FLAG OR
                 a.PAID_DATE IS DISTINCT FROM b.PAID_DATE OR
                 a.PAID_DATE_KEY IS DISTINCT FROM b.PAID_DATE_KEY OR
                 a.VOID IS DISTINCT FROM b.VOID OR
                 a.VOIDED_DATE IS DISTINCT FROM b.VOIDED_DATE OR
                 a.PAYMENT_STATUS IS DISTINCT FROM b.PAYMENT_STATUS OR
                 a.APPROVAL_STATUS IS DISTINCT FROM b.APPROVAL_STATUS OR
                 a.CURRENT_APPROVAL_LEVEL IS DISTINCT FROM b.CURRENT_APPROVAL_LEVEL OR
                 a.APPROVAL_LAST_MODIFIED_ON_SYD IS DISTINCT FROM b.APPROVAL_LAST_MODIFIED_ON_SYD OR
                 a.COMPLETE_STATUS IS DISTINCT FROM b.COMPLETE_STATUS OR
                 a.NOTIFICATION_ID IS DISTINCT FROM b.NOTIFICATION_ID OR
                 a.ERP_PAYMENT_STATUS IS DISTINCT FROM b.ERP_PAYMENT_STATUS OR
                ROUND(CAST(a.INVOICE_AMOUNT AS DECIMAL(18,1)),1) IS DISTINCT FROM ROUND(CAST(b.INVOICE_AMOUNT AS DECIMAL(18,1)),1) OR
                 a.INVOICE_NUMBER_AND_STATUS IS DISTINCT FROM b.INVOICE_NUMBER_AND_STATUS OR
                 a.INVOICE_STATUS IS DISTINCT FROM b.INVOICE_STATUS OR
                 a.NOTIFICATION_ID_ASSIGNED_FLAG IS DISTINCT FROM b.NOTIFICATION_ID_ASSIGNED_FLAG OR
                 a.WORKFLOW_STATUS IS DISTINCT FROM b.WORKFLOW_STATUS OR
                 a.ERP_INVOICE_STATUS_VOID IS DISTINCT FROM b.ERP_INVOICE_STATUS_VOID OR
                 a.ERP_PAYMENT_STATUS_VOID IS DISTINCT FROM b.ERP_PAYMENT_STATUS_VOID OR
                 a.PAYMENT_STATUS_VOID IS DISTINCT FROM b.PAYMENT_STATUS_VOID OR
                 a.AMOUNT_TO_PAY_HEADER IS DISTINCT FROM b.AMOUNT_TO_PAY_HEADER OR
                 a.GROSS_AMOUNT_HEADER IS DISTINCT FROM b.GROSS_AMOUNT_HEADER OR
                 a.VOLUME_HEADER IS DISTINCT FROM b.VOLUME_HEADER OR
                 a.NUMBER_OF_TRANSACTIONS_HEADER IS DISTINCT FROM b.NUMBER_OF_TRANSACTIONS_HEADER OR
                 a.PYMT_AMOUNT_RECENT_FLAG IS DISTINCT FROM b.PYMT_AMOUNT_RECENT_FLAG OR
                 a.RECONCILIATION_FLAG IS DISTINCT FROM b.RECONCILIATION_FLAG OR
                 a.RECONCILIATION_FLAG_SIMPLE IS DISTINCT FROM b.RECONCILIATION_FLAG_SIMPLE
            THEN 'Mismatch in values'
            ELSE 'Match'
        END <> 'Match'
GROUP BY 
    COALESCE(a.ID, b.ID),
    COALESCE(a.PAYMENT_ID,''),
    CASE 
        WHEN a.ID IS NULL THEN 'Missing in TMP'
        WHEN b.ID IS NULL THEN 'Missing in PROD'
        WHEN (
          a.MULTI_SCHEME_ID IS DISTINCT FROM b.MULTI_SCHEME_ID OR
                 a.SCHEME IS DISTINCT FROM b.SCHEME OR
                 a.KAFKA_ID IS DISTINCT FROM b.KAFKA_ID OR
                 a.POS_TXN_NUM IS DISTINCT FROM b.POS_TXN_NUM OR
                 a.TRANSACTION_TYPE IS DISTINCT FROM b.TRANSACTION_TYPE OR
                 a.PAYMENT_METHOD IS DISTINCT FROM b.PAYMENT_METHOD OR
                 a.CONSUMER_ID IS DISTINCT FROM b.CONSUMER_ID OR
                 a.CONSUMER_NAME IS DISTINCT FROM b.CONSUMER_NAME OR
                 a.RECIPIENT_PARTICIPANT_NUMBER IS DISTINCT FROM b.RECIPIENT_PARTICIPANT_NUMBER OR
                 a.RECIPIENT_SITE_NUMBER IS DISTINCT FROM b.RECIPIENT_SITE_NUMBER OR
                 a.RECIPIENT_NAME IS DISTINCT FROM b.RECIPIENT_NAME OR
                 a.RECIPIENT_TYPE IS DISTINCT FROM b.RECIPIENT_TYPE OR
                 a.CRP_SITE_NUMBER IS DISTINCT FROM b.CRP_SITE_NUMBER OR
                 a.CRP_SITE_NAME IS DISTINCT FROM b.CRP_SITE_NAME OR
                 a.SITE_CONTRACT_MANAGER_NAME IS DISTINCT FROM b.SITE_CONTRACT_MANAGER_NAME OR
                 a.EMAIL IS DISTINCT FROM b.EMAIL OR
                 a.PO_COMMUNICATION_EMAIL IS DISTINCT FROM b.PO_COMMUNICATION_EMAIL OR
                 a.MATERIAL_TYPE_ID IS DISTINCT FROM b.MATERIAL_TYPE_ID OR
                 a.LINE_NUM IS DISTINCT FROM b.LINE_NUM OR
                 a.PAYMENT_PERIOD IS DISTINCT FROM b.PAYMENT_PERIOD OR
                 a.PERIOD IS DISTINCT FROM b.PERIOD OR
                 a.AMOUNT_TO_PAY IS DISTINCT FROM b.AMOUNT_TO_PAY OR
                 a.VOLUME IS DISTINCT FROM b.VOLUME OR
                 a.GROSS_AMOUNT IS DISTINCT FROM b.GROSS_AMOUNT OR
                 a.VOID_STATUS IS DISTINCT FROM b.VOID_STATUS OR
                 a.PAY_REF_NUMBER IS DISTINCT FROM b.PAY_REF_NUMBER OR
                 a.PAID IS DISTINCT FROM b.PAID OR
                 a.INVOICED IS DISTINCT FROM b.INVOICED OR
                 a.ERP_PAID IS DISTINCT FROM b.ERP_PAID OR
                 a.PAYMENT_AMOUNT IS DISTINCT FROM b.PAYMENT_AMOUNT OR
                -- ABS(a.PAYMENT_LINE_AGG - b.PAYMENT_LINE_AGG) > 0.1 OR
                 a.CREATED_BY IS DISTINCT FROM b.CREATED_BY OR
                 a.CREATED_ON IS DISTINCT FROM b.CREATED_ON OR
                 a.CREATED_ON_UTC IS DISTINCT FROM b.CREATED_ON_UTC OR
                 a.LAST_MODIFIED_BY IS DISTINCT FROM b.LAST_MODIFIED_BY OR
                 a.LAST_MODIFIED_ON_UTC IS DISTINCT FROM b.LAST_MODIFIED_ON_UTC OR
                 a.APPROVAL_FLAG IS DISTINCT FROM b.APPROVAL_FLAG OR
                 a.WF_RULES_PASSED IS DISTINCT FROM b.WF_RULES_PASSED OR
                 a.PAYRUN_STATUS IS DISTINCT FROM b.PAYRUN_STATUS OR
                 a.PAYRUN_CREATED_ON IS DISTINCT FROM b.PAYRUN_CREATED_ON OR
                 a.TODAY_ORDER IS DISTINCT FROM b.TODAY_ORDER OR
                 a.PAYRUN_ON_THE_PORTAL IS DISTINCT FROM b.PAYRUN_ON_THE_PORTAL OR
                 a.TODAY_NEW_PAYMENT_FLAG IS DISTINCT FROM b.TODAY_NEW_PAYMENT_FLAG OR
                 a.PAID_DATE IS DISTINCT FROM b.PAID_DATE OR
                 a.PAID_DATE_KEY IS DISTINCT FROM b.PAID_DATE_KEY OR
                 a.VOID IS DISTINCT FROM b.VOID OR
                 a.VOIDED_DATE IS DISTINCT FROM b.VOIDED_DATE OR
                 a.PAYMENT_STATUS IS DISTINCT FROM b.PAYMENT_STATUS OR
                 a.APPROVAL_STATUS IS DISTINCT FROM b.APPROVAL_STATUS OR
                 a.CURRENT_APPROVAL_LEVEL IS DISTINCT FROM b.CURRENT_APPROVAL_LEVEL OR
                 a.APPROVAL_LAST_MODIFIED_ON_SYD IS DISTINCT FROM b.APPROVAL_LAST_MODIFIED_ON_SYD OR
                 a.COMPLETE_STATUS IS DISTINCT FROM b.COMPLETE_STATUS OR
                 a.NOTIFICATION_ID IS DISTINCT FROM b.NOTIFICATION_ID OR
                 a.ERP_PAYMENT_STATUS IS DISTINCT FROM b.ERP_PAYMENT_STATUS OR
                 ROUND(CAST(a.INVOICE_AMOUNT AS DECIMAL(18,1)),1) IS DISTINCT FROM ROUND(CAST(b.INVOICE_AMOUNT AS DECIMAL(18,1)),1) OR
                 a.INVOICE_NUMBER_AND_STATUS IS DISTINCT FROM b.INVOICE_NUMBER_AND_STATUS OR
                 a.INVOICE_STATUS IS DISTINCT FROM b.INVOICE_STATUS OR
                 a.NOTIFICATION_ID_ASSIGNED_FLAG IS DISTINCT FROM b.NOTIFICATION_ID_ASSIGNED_FLAG OR
                 a.WORKFLOW_STATUS IS DISTINCT FROM b.WORKFLOW_STATUS OR
                 a.ERP_INVOICE_STATUS_VOID IS DISTINCT FROM b.ERP_INVOICE_STATUS_VOID OR
                 a.ERP_PAYMENT_STATUS_VOID IS DISTINCT FROM b.ERP_PAYMENT_STATUS_VOID OR
                 a.PAYMENT_STATUS_VOID IS DISTINCT FROM b.PAYMENT_STATUS_VOID OR
                 a.AMOUNT_TO_PAY_HEADER IS DISTINCT FROM b.AMOUNT_TO_PAY_HEADER OR
                 a.GROSS_AMOUNT_HEADER IS DISTINCT FROM b.GROSS_AMOUNT_HEADER OR
                 a.VOLUME_HEADER IS DISTINCT FROM b.VOLUME_HEADER OR
                 a.NUMBER_OF_TRANSACTIONS_HEADER IS DISTINCT FROM b.NUMBER_OF_TRANSACTIONS_HEADER OR
                 a.PYMT_AMOUNT_RECENT_FLAG IS DISTINCT FROM b.PYMT_AMOUNT_RECENT_FLAG OR
                 a.RECONCILIATION_FLAG IS DISTINCT FROM b.RECONCILIATION_FLAG OR
                 a.RECONCILIATION_FLAG_SIMPLE IS DISTINCT FROM b.RECONCILIATION_FLAG_SIMPLE
        )
        THEN 'Mismatch in values'
        ELSE 'Match'
    END,
    
    a.ID, b.ID,
    a.LAST_MODIFIED_ON_UTC,
    b.LAST_MODIFIED_ON_UTC,
    TO_TIMESTAMP_NTZ(CONVERT_TIMEZONE('UTC', CURRENT_TIMESTAMP) - INTERVAL '1 HOURS')
  --  ,CAST(A.PAYMENT_LINE_AGG AS DECIMAL(18,1))
   -- ,CAST(B.PAYMENT_LINE_AGG AS DECIMAL(18,1))
    ,A.CREATED_BY 
    ,B.CREATED_BY
    ,A.CREATED_ON_UTC
    ,B.CREATED_ON_UTC 

  -- ,
    -- a.*,
    -- b.*


;


/*ROW CHECK */
SELECT 'RAW_DEV.TEST.FIN_RTP_KAFKA_V_TMP' AS TABLE_NAME, COUNT(*) AS ROW_COUNT FROM RAW_DEV.TEST.FIN_RTP_KAFKA_V_TMP
UNION ALL
SELECT 'COMMON_PROD.DWH.FIN_RTP_KAFKA_V', COUNT(*) FROM COMMON_PROD.DWH.FIN_RTP_KAFKA_v

;

SELECT * FROM  RAW_DEV.TEST.FIN_RTP_KAFKA_V_TMP
                WHERE INCREMENTAL_ID IN (
                SELECT E.INCREMENTAL_ID
                FROM RAW_DEV.TEST.FIN_RTP_KAFKA_V_TMP E
                WHERE 
                (DATEADD(DAY,14, E.PAID_DATE) < SYSDATE()) 
                OR (E.PAID_DATE IS NULL 
                AND DATEADD(DAY,15, CONVERT_TIMEZONE('UTC', 'Australia/Sydney', E.LAST_MODIFIED_ON_UTC)) < SYSDATE() 
                )
                );
;

;


/* ROW COUNT DIFFERENCE ON KAFKA ID */
WITH OPTIMIZED_TABLE AS (
    SELECT CONCAT(COALESCE(TO_CHAR(ID),''), '-', COALESCE(TO_CHAR(LINE_NUM),'')) AS ID FROM RAW_DEV.TEST.FIN_RTP_KAFKA_V_TMP
), 
CURRENT_TABLE AS (
    SELECT CONCAT(COALESCE(TO_CHAR(ID),''), '-', COALESCE(TO_CHAR(LINE_NUM),''))  AS ID FROM COMMON_PROD.DWH.FIN_RTP_KAFKA_V
)
SELECT 
    COALESCE(O.ID,C.ID) AS ID,
    CASE 
        WHEN O.ID IS NOT NULL AND C.ID IS NULL THEN 'Missing in COMMON_PROD'
        WHEN O.ID IS NULL AND C.ID IS NOT NULL THEN 'Missing in RAW_DEV'
    END AS COMPARE_STATUS
FROM (
    SELECT ID FROM OPTIMIZED_TABLE
    UNION
    SELECT ID FROM CURRENT_TABLE
) ALL_IDS
LEFT JOIN OPTIMIZED_TABLE O ON ALL_IDS.ID = O.ID
LEFT JOIN CURRENT_TABLE C ON ALL_IDS.ID = C.ID
WHERE O.ID IS NULL OR C.ID IS NULL;


;


SELECT LAST_MODIFIED_ON_UTC, PAID_DATE,(DATEADD(DAY,14,PAID_DATE)) AS CONDITIONAL,  DATEADD(DAY,15,LAST_MODIFIED_ON_UTC) CONDITIONAL_2,
SYSDATE(), ID, LINE_NUM, PAYMENT_ID, PAYMENT_LINE_AGG, * 
FROM RAW_DEV.TEST.FIN_RTP_KAFKA_V_TMP 
WHERE ID = '0e5489fd-7cf2-4d8a-ad58-91d5444ab358';


SELECT LAST_MODIFIED_ON_UTC, PAID_DATE, ID, LINE_NUM,PAYMENT_LINE_AGG, * FROM COMMON_PROD.DWH.FIN_RTP_KAFKA 
WHERE ID = '0e5489fd-7cf2-4d8a-ad58-91d5444ab358';


SELECT ID, LINE_NUM FROM COMMON_PROD.DWH.FIN_RTP_KAFKA WHERE ID IS NULL

/* QUERY CREATING THE FULL TABLE OF KAFKA_V */
;
SELECT   LAST_MODIFIED_ON_UTC, PAID_DATE, PAYMENT_LINE_AGG, ID, LINE_NUM, * FROM (

SELECT
E.MULTI_SCHEME_ID  AS MULTI_SCHEME_ID 
, SCHEME.NAME AS SCHEME
, E.KAFKA_ID AS ID
, E.PAYMENT_ID
, E.TRANSACTION_ID AS POS_TXN_NUM
, E.TRANSACTION_TYPE AS TRANSACTION_TYPE
, E.PAYMENT_METHOD AS PAYMENT_METHOD
, E.CONSUMER_ID AS CONSUMER_ID
, PS_C.SITE_NAME AS CONSUMER_NAME
, E.RECIPIENT_PARTICIPANT_NUMBER AS RECIPIENT_PARTICIPANT_NUMBER
, NVL(E.RECIPIENT_SITE_NUMBER, E.RECIPIENT_PARTICIPANT_NUMBER) AS RECIPIENT_SITE_NUMBER
, PS_R.SITE_NAME AS RECIPIENT_NAME
, E.RECIPIENT_TYPE AS RECIPIENT_TYPE
, E.CRP_SITE_NUMBER AS CRP_SITE_NUMBER
, PS_CRP.SITE_NAME AS CRP_SITE_NAME
, CC.FIRST_NAME || ' ' || CC.LAST_NAME AS SITE_CONTRACT_MANAGER_NAME
, PS_CRP.SITE_ADDR_CONTACT_EMAIL AS EMAIL
, PS_CRP.PO_COMMUNICATION_EMAIL AS PO_COMMUNICATION_EMAIL
, NVL(ATP.MATERIAL_TYPE_ID, R.MATERIAL_TYPE_ID) AS MATERIAL_TYPE_ID
, ROW_NUMBER() OVER (PARTITION BY E.KAFKA_ID ORDER BY ATP.ID) AS LINE_NUM
, CONVERT_TIMEZONE('UTC', SCHEME.TIMEZONE, E.TRANSACTION_DATE)  AS PAYMENT_PERIOD
, E.KAFKA_DATETIME AS PERIOD
, ATP.AMOUNT_TO_PAY AS AMOUNT_TO_PAY
, R.CONTAINER_COUNT AS VOLUME
, R.TOTAL_AMOUNT AS GROSS_AMOUNT
, CASE WHEN PYMT.VOID = 'VOID' THEN 'VOIDED' ELSE 'NOT VOIDED' END AS VOID_STATUS
, E.PAY_REF_NUMBER AS PAY_REF_NUMBER
, CASE WHEN PYMT.PAID = 'PAID' THEN 'Y' ELSE 'N' END AS PAID
, CASE WHEN NVL(PYMT.INVOICED, POS_STATUS.INVOICED) = 'INVOICED' THEN 'Y' ELSE 'N' END AS INVOICED
, CASE WHEN NVL(PYMT.ERP_PAYMENT_COMPLETE, POS_STATUS.ERP_PAYMENT_COMPLETE) = 'ERP PAYMENT COMPLETED' THEN 'Y' ELSE 'N' END AS ERP_PAID
, E.TOTAL_AMOUNT_TO_PAY AS PAYMENT_AMOUNT
, SUM(ATP.AMOUNT_TO_PAY) OVER (PARTITION BY E.PAYMENT_ID) AS PAYMENT_LINE_AGG
, FIRST_VALUE(E.MODIFIED_BY) OVER (PARTITION BY E.PAYMENT_ID ORDER BY E.KAFKA_DATETIME) AS CREATED_BY
, CONVERT_TIMEZONE('UTC', SCHEME.TIMEZONE, MIN(E.KAFKA_DATETIME) OVER (PARTITION BY E.PAYMENT_ID)) AS CREATED_ON
, MIN(E.KAFKA_DATETIME) OVER (PARTITION BY E.PAYMENT_ID) AS CREATED_ON_UTC
, LAST_VALUE(E.MODIFIED_BY) OVER (PARTITION BY E.PAYMENT_ID ORDER BY E.KAFKA_DATETIME) AS LAST_MODIFIED_BY
, MAX(E.KAFKA_DATETIME) OVER (PARTITION BY E.PAYMENT_ID) AS LAST_MODIFIED_ON_UTC
, CASE WHEN E.STATUS IN ('APPROVED', 'PAID') THEN 'Y' ELSE 'N' END AS APPROVAL_FLAG
, E.PASSED AS WF_RULES_PASSED
, E.PAYRUN_STATUS AS PAYRUN_STATUS
, CONVERT_TIMEZONE('UTC', SCHEME.TIMEZONE, E.PAYMENTS_CREATED_ON_AND_BEFORE) AS PAYRUN_CREATED_ON
, E.TODAY_ORDER AS TODAY_ORDER
, TO_CHAR(CONVERT_TIMEZONE('UTC', SCHEME.TIMEZONE, E.PAYMENTS_CREATED_ON_AND_BEFORE), 'YYYY-MM-DD') || ' (' || E.TODAY_ORDER || ')' AS PAYRUN_ON_THE_PORTAL
, CASE WHEN TO_CHAR(CONVERT_TIMEZONE('UTC', 'Australia/Sydney', MIN(E.KAFKA_DATETIME) OVER (PARTITION BY E.PAYMENT_ID)), 'YYYYMMDDHH') >= TO_CHAR(CONVERT_TIMEZONE('UTC', 'Australia/Sydney', SYSDATE()), 'YYYYMMDD') || '03' AND E.PAYRUN_ID IS NULL THEN 1 ELSE 0 END AS TODAY_NEW_PAYMENT_FLAG
, CONVERT_TIMEZONE('UTC',SCHEME.TIMEZONE,CAST(PYMT.PAID_DATE AS TIMESTAMP)) AS PAID_DATE
, TO_CHAR(CONVERT_TIMEZONE('UTC',SCHEME.TIMEZONE,CAST(PYMT.PAID_DATE AS TIMESTAMP)),'YYYYMMDD') AS PAID_DATE_KEY
, PYMT.VOID AS VOID
, CONVERT_TIMEZONE('UTC',SCHEME.TIMEZONE,CAST(PYMT.VOIDED_DATE AS TIMESTAMP)) AS VOIDED_DATE
, COALESCE(PYMT.PAID, PYMT.PAYMENT_ERROR, 'NOT PAID') AS PAYMENT_STATUS
, CASE WHEN E.STATUS = 'PAID' THEN NULL ELSE E.STATUS END AS APPROVAL_STATUS
, LAST_VALUE(CASE WHEN E.STATUS = 'APPROVED' THEN E.MODIFIED_BY ELSE NULL END) IGNORE NULLS OVER (PARTITION BY E.PAYMENT_ID ORDER BY E.KAFKA_DATETIME) AS CURRENT_APPROVAL_LEVEL
, CONVERT_TIMEZONE('UTC', 'Australia/Sydney', MAX(CASE WHEN E.STATUS = 'APPROVED' THEN E.KAFKA_DATETIME ELSE NULL END) OVER (PARTITION BY E.PAYMENT_ID)) AS APPROVAL_LAST_MODIFIED_ON_SYD
, COALESCE(PYMT.INVOICED, PYMT.ERROR_INV_ERP, POS_STATUS.INVOICED, 'NOT INVOICED') AS COMPLETE_STATUS
, E.PAYRUN_ID AS NOTIFICATION_ID
, COALESCE(PYMT.ERP_PAYMENT_COMPLETE, PYMT.ERROR_PAY_ERP, PYMT.NO_VALID_ERP_BNK, POS_STATUS.ERP_PAYMENT_COMPLETE, 'NO ERP PAYMENT') AS ERP_PAYMENT_STATUS
, COALESCE(INV.INVOICE_AMOUNT, INV_POS.INVOICE_AMOUNT) AS INVOICE_AMOUNT
, COALESCE(INV.INVOICE_NUMBER_AND_STATUS, INV_POS.INVOICE_NUMBER_AND_STATUS) AS INVOICE_NUMBER_AND_STATUS
, CASE WHEN COALESCE(PYMT.INVOICED, PYMT.ERROR_INV_ERP, POS_STATUS.INVOICED, 'NOT INVOICED') = 'INVOICED' OR COALESCE(PYMT.INVOICED, PYMT.ERROR_INV_ERP, POS_STATUS.INVOICED, 'NOT INVOICED') LIKE '%ERROR%' THEN COALESCE(PYMT.INVOICED, PYMT.ERROR_INV_ERP, POS_STATUS.INVOICED, 'NOT INVOICED') ELSE 'NOT INVOICED' END AS INVOICE_STATUS
, NVL2(E.PAYRUN_ID, 'Y', 'N') AS NOTIFICATION_ID_ASSIGNED_FLAG
, CASE WHEN E.STATUS NOT IN ('APPROVED', 'PAID') THEN 'Payment Without Approval' WHEN E.STATUS IN ('APPROVED', 'PAID') THEN 'Workflow Amount' ELSE '-' END AS WORKFLOW_STATUS
, CASE WHEN NVL(PYMT.INVOICED, POS_STATUS.INVOICED) = 'INVOICED' THEN 'Invoiced' ELSE 'Not Invoiced' END AS ERP_INVOICE_STATUS_VOID
, CASE WHEN NVL(PYMT.ERP_PAYMENT_COMPLETE, POS_STATUS.ERP_PAYMENT_COMPLETE) = 'ERP PAYMENT COMPLETED' THEN 'ERP Payment Completed' ELSE 'No ERP Payment' END AS ERP_PAYMENT_STATUS_VOID
, CASE WHEN PYMT.VOID = 'VOID' THEN 'Return from Bank' WHEN PYMT.PAID = 'PAID' THEN 'Paid' ELSE 'Not Paid' END AS PAYMENT_STATUS_VOID
, 'Amount to Pay' AS AMOUNT_TO_PAY_HEADER
, 'Gross Amount' AS GROSS_AMOUNT_HEADER
, 'Volume' AS VOLUME_HEADER
, 'Number of Transactions' AS NUMBER_OF_TRANSACTIONS_HEADER
, SYSDATE() AS INSERT_DATE_UTC
, RANK() OVER (PARTITION BY E.PAYMENT_ID ORDER BY E.KAFKA_DATETIME DESC) AS PYMT_AMOUNT_RECENT_FLAG
,PYMT.INVOICED
,PYMT.ERROR_INV_ERP
,POS_STATUS.INVOICED
,COALESCE(PYMT.INVOICED, PYMT.ERROR_INV_ERP, POS_STATUS.INVOICED, 'NOT INVOICED') FIRST_CONDITION
,PYMT.PAID
,PYMT.PAYMENT_ERROR
,PYMT.ERP_PAYMENT_COMPLETE
,PYMT.ERROR_PAY_ERP
,PYMT.NO_VALID_ERP_BNK
,POS_STATUS.ERP_PAYMENT_COMPLETE
,COALESCE(PYMT.ERP_PAYMENT_COMPLETE, PYMT.ERROR_PAY_ERP, PYMT.NO_VALID_ERP_BNK, POS_STATUS.ERP_PAYMENT_COMPLETE, 'NO ERP PAYMENT') SECOND_CONDITION
, E.TOTAL_AMOUNT_TO_PAY
,INV.INVOICE_AMOUNT AS INV_INOICE_AMOUNT
,INV_POS.INVOICE_AMOUNT AS POS_INVOICE_AMOUNT
,COALESCE(INV.INVOICE_AMOUNT, INV_POS.INVOICE_AMOUNT) SECOND_2_CONDITION
, CASE WHEN COALESCE(PYMT.INVOICED, PYMT.ERROR_INV_ERP, POS_STATUS.INVOICED, 'NOT INVOICED') = 'INVOICED'
    AND COALESCE(PYMT.PAID, PYMT.PAYMENT_ERROR, 'NOT PAID') = 'PAID'
    AND COALESCE(PYMT.ERP_PAYMENT_COMPLETE, PYMT.ERROR_PAY_ERP, PYMT.NO_VALID_ERP_BNK, POS_STATUS.ERP_PAYMENT_COMPLETE, 'NO ERP PAYMENT') = 'ERP PAYMENT COMPLETED'
    AND E.TOTAL_AMOUNT_TO_PAY = COALESCE(INV.INVOICE_AMOUNT, INV_POS.INVOICE_AMOUNT)
    THEN 'Reconciled Amount'
    ELSE (CASE WHEN E.TOTAL_AMOUNT_TO_PAY > COALESCE(INV.INVOICE_AMOUNT, INV_POS.INVOICE_AMOUNT)
        THEN 'PAAS Amount is More Than ERP'
        WHEN E.TOTAL_AMOUNT_TO_PAY < COALESCE(INV.INVOICE_AMOUNT, INV_POS.INVOICE_AMOUNT)
        THEN 'PAAS Amount is Less Than ERP'
        ELSE 'Other Unreconciled Amount' END
        )
    END AS RECONCILIATION_FLAG
, CASE WHEN COALESCE(PYMT.INVOICED, PYMT.ERROR_INV_ERP, POS_STATUS.INVOICED, 'NOT INVOICED') = 'INVOICED'
    AND COALESCE(PYMT.PAID, PYMT.PAYMENT_ERROR, 'NOT PAID') = 'PAID'
    AND COALESCE(PYMT.ERP_PAYMENT_COMPLETE, PYMT.ERROR_PAY_ERP, PYMT.NO_VALID_ERP_BNK, POS_STATUS.ERP_PAYMENT_COMPLETE, 'NO ERP PAYMENT') = 'ERP PAYMENT COMPLETED'
    AND E.TOTAL_AMOUNT_TO_PAY = COALESCE(INV.INVOICE_AMOUNT, INV_POS.INVOICE_AMOUNT)
    THEN 'Reconciled Amount'
    ELSE 'Unreconciled Amount'
    END AS RECONCILIATION_FLAG_SIMPLE
FROM
RAW_PROD.CES_MSCM_KAFKA.PYMT_EVENT AS E
LEFT JOIN RAW_PROD.CES_MSCM_KAFKA.PYMT_EVENT_AMT_TO_PAY AS ATP
ON E.PAYMENT_ID = ATP.PAYMENT_ID
LEFT JOIN RAW_PROD.CES_MSCM_KAFKA.PYMT_EVENT_REFUND_ITEMS AS R
ON E.TRANSACTION_ID = R.TRANSACTION_ID
/*LEFT JOIN RAW_PROD.CES_MSCM_KAFKA.PYMT_EVENT_EVALUATION AS EE
ON E.RUN_ID = EE.RUN_ID*/
LEFT JOIN RAW_PROD.CES_MSCM_ORACLE.MDT_PARTICIPANT_SITES AS PS_C
ON E.CONSUMER_ID = PS_C.SITE_NUMBER
LEFT JOIN RAW_PROD.CES_MSCM_ORACLE.MDT_PARTICIPANT_SITES AS PS_R
ON NVL(E.RECIPIENT_SITE_NUMBER, E.RECIPIENT_PARTICIPANT_NUMBER) = PS_R.SITE_NUMBER
LEFT JOIN RAW_PROD.CES_MSCM_ORACLE.MDT_PARTICIPANT_SITES AS PS_CRP
ON E.CRP_SITE_NUMBER = PS_CRP.SITE_NUMBER
LEFT JOIN (
    SELECT
    C.FIRST_NAME,
    C.LAST_NAME,
    LOWER(C.EMAIL) AS EMAIL
    FROM RAW_PROD.CES_MSCM_ORACLE.MDT_CONTACTS AS C
    WHERE ACTIVE = 1
    QUALIFY ROW_NUMBER() OVER (PARTITION BY LOWER(C.EMAIL) ORDER BY C.LAST_MODIFIED_ON DESC) = 1
    ) CC
ON LOWER(PS_CRP.ATTRIBUTE2) = CC.EMAIL
LEFT JOIN (
    SELECT
    H.PYMT_TRXN_HEADER_ID,
    H.PAY_REF_NUMBER,
    H.POS_TXN_NUM
    FROM RAW_PROD.CES_MSCM_ORACLE.PYMT_TRANSACTION_HEADERS AS H
    QUALIFY RANK() OVER (PARTITION BY H.POS_TXN_NUM ORDER BY H.PYMT_TRXN_HEADER_ID DESC) = 1
) PTH
--ON E.PAY_REF_NUMBER = PTH.PAY_REF_NUMBER
ON E.TRANSACTION_ID = PTH.POS_TXN_NUM
LEFT JOIN COMMON_PROD.DWH.PYMT_STATUS AS PYMT 
ON TO_CHAR(PTH.PYMT_TRXN_HEADER_ID) = TO_CHAR(PYMT.ID)
AND PYMT.ID_TYPE = 'PYMT_TRXN_HEADER_ID'
LEFT JOIN COMMON_PROD.DWH.PYMT_STATUS AS POS_STATUS
ON TO_CHAR(E.TRANSACTION_ID) = TO_CHAR(POS_STATUS.ID)
AND POS_STATUS.ID_TYPE = 'POS_TXN_NUM'
LEFT JOIN COMMON_PROD.DWH.INV_AMOUNT AS INV 
ON TO_CHAR(PTH.PYMT_TRXN_HEADER_ID) = TO_CHAR(INV.ID)
AND INV.ID_TYPE = 'PYMT_TRXN_HEADER_ID'
LEFT JOIN COMMON_PROD.DWH.INV_AMOUNT AS INV_POS 
ON TO_CHAR(E.TRANSACTION_ID) = TO_CHAR(INV_POS.ID)
AND INV_POS.ID_TYPE = 'POS_TXN_NUM'
INNER JOIN RAW_PROD.CES_MSCM_ORACLE.SCHEME AS SCHEME 
ON E.MULTI_SCHEME_ID = SCHEME.MULTI_SCHEME_ID
WHERE 1 = 1
AND (
    ATP.MATERIAL_TYPE_ID = R.MATERIAL_TYPE_ID
    OR ATP.MATERIAL_TYPE_ID IS NULL
    OR R.MATERIAL_TYPE_ID IS NULL
)
AND TO_CHAR(CONVERT_TIMEZONE('UTC', 'Australia/Sydney', E.KAFKA_DATETIME), 'YYYYMMDD') >= '20230924'
AND (DATEADD(DAY,14,CONVERT_TIMEZONE('UTC',SCHEME.TIMEZONE,CAST(PYMT.PAID_DATE AS TIMESTAMP))) >= SYSDATE() OR (PYMT.PAID_DATE IS NULL AND DATEADD(DAY,15,CONVERT_TIMEZONE('UTC', 'Australia/Sydney', E.KAFKA_DATETIME)) >= SYSDATE()))
AND E.PAYMENT_METHOD <> 'CASH'
QUALIFY PYMT_AMOUNT_RECENT_FLAG = 1



) X
 WHERE PAYMENT_ID = '97e848e2-9f76-4df0-a0e3-db083dc95b82'

;


;
--POST HOOK PROPOSAL: 

--DELETE   FROM RAW_DEV.TEST.FIN_RTP_KAFKA_V_TMP
WHERE INCREMENTAL_ID IN (
SELECT E.INCREMENTAL_ID
FROM RAW_DEV.TEST.FIN_RTP_KAFKA_V_TMP E
WHERE 
(DATEADD(DAY,14, E.PAID_DATE) < SYSDATE()) 
OR (E.PAID_DATE IS NULL 
AND DATEADD(DAY,15, CONVERT_TIMEZONE('UTC', 'Australia/Sydney', E.LAST_MODIFIED_ON_UTC)) < SYSDATE() 
))


;


SELECT DATEADD(DAY,14,PAID_DATE) PAID_DATE, SYSDATE(), DATEADD(DAY,15,LAST_MODIFIED_ON_UTC) LAST_MODIFIED, * FROM RAW_DEV.TEST.FIN_RTP_KAFKA_V_TMP E

WHERE 
(DATEADD(DAY,14,CAST(E.PAID_DATE AS TIMESTAMP)) < SYSDATE() 
 OR (E.PAID_DATE IS NULL AND DATEADD(DAY,15,CONVERT_TIMEZONE('UTC', 'Australia/Sydney', E.LAST_MODIFIED_ON_UTC)) < SYSDATE()))
 
 ;


/* PAYMENT ID CHECKS */

WITH INCREMENTAL_DATE_REF AS (

 SELECT DATEADD(HOUR, -12, CURRENT_TIMESTAMP) AS INCREMENTAL_DELTA

)
SELECT
E.PAYMENT_ID
FROM RAW_PROD.CES_MSCM_KAFKA.PYMT_EVENT E  --20 M ROWS
LEFT JOIN RAW_PROD.CES_MSCM_KAFKA.PYMT_EVENT_AMT_TO_PAY AS ATP   --60 M ROWS
ON E.PAYMENT_ID = ATP.PAYMENT_ID AND ATP.KAFKA_DATETIME   >= (SELECT INCREMENTAL_DELTA FROM INCREMENTAL_DATE_REF)
LEFT JOIN RAW_PROD.CES_MSCM_KAFKA.PYMT_EVENT_REFUND_ITEMS AS R  --60 M ROWS
ON E.TRANSACTION_ID = R.TRANSACTION_ID AND R.KAFKA_DATETIME   >= (SELECT INCREMENTAL_DELTA FROM INCREMENTAL_DATE_REF)
LEFT JOIN RAW_PROD.CES_MSCM_ORACLE.MDT_PARTICIPANT_SITES PS_C
ON E.CONSUMER_ID = PS_C.SITE_NUMBER
LEFT JOIN RAW_PROD.CES_MSCM_ORACLE.MDT_PARTICIPANT_SITES PS_CRP
ON E.CRP_SITE_NUMBER = PS_CRP.SITE_NUMBER
LEFT JOIN (
    SELECT
    C.FIRST_NAME,
    C.LAST_NAME,
    LOWER(C.EMAIL) AS EMAIL,
    C.LAST_MODIFIED_ON
    FROM RAW_PROD.CES_MSCM_ORACLE.MDT_CONTACTS C
    WHERE ACTIVE = 1
    QUALIFY ROW_NUMBER() OVER (PARTITION BY LOWER(C.EMAIL) ORDER BY C.LAST_MODIFIED_ON DESC) = 1
        ) CC
ON LOWER(PS_CRP.ATTRIBUTE2) = CC.EMAIL
LEFT JOIN (
    SELECT
    H.PYMT_TRXN_HEADER_ID,
    H.PAY_REF_NUMBER,
    H.POS_TXN_NUM,
    H.LAST_MODIFIED_ON
    FROM RAW_PROD.CES_MSCM_ORACLE.PYMT_TRANSACTION_HEADERS AS H
    QUALIFY RANK() OVER (PARTITION BY H.POS_TXN_NUM ORDER BY H.PYMT_TRXN_HEADER_ID DESC) = 1
        ) PTH
ON E.TRANSACTION_ID = PTH.POS_TXN_NUM
WHERE 
(E.KAFKA_DATETIME >= (SELECT INCREMENTAL_DELTA FROM INCREMENTAL_DATE_REF)
OR PS_C.LAST_MODIFIED_ON  >= (SELECT INCREMENTAL_DELTA FROM INCREMENTAL_DATE_REF)
OR CC.LAST_MODIFIED_ON    >= (SELECT INCREMENTAL_DELTA FROM INCREMENTAL_DATE_REF)
OR PTH.LAST_MODIFIED_ON   >= (SELECT INCREMENTAL_DELTA FROM INCREMENTAL_DATE_REF)
OR ATP.KAFKA_DATETIME   >= (SELECT INCREMENTAL_DELTA FROM INCREMENTAL_DATE_REF)
OR R.KAFKA_DATETIME   >= (SELECT INCREMENTAL_DELTA FROM INCREMENTAL_DATE_REF))
AND E.KAFKA_DATETIME >= CONVERT_TIMEZONE('Australia/Sydney', 'UTC', TO_TIMESTAMP('2023-09-24 00:00:00'))
AND E.PAYMENT_METHOD <> 'CASH'
AND E.PAYMENT_ID = '8ad39fdf-a7a1-41c6-baee-1aed48bb96f7'
GROUP BY E.PAYMENT_ID

 ;
/* INCREMENTAL MODEL */

SELECT * FROM (




WITH PYMT_STATUS AS (

SELECT * FROM RAW_DEV.TEST.PYMT_STATUS_TMP

)

, INCREMENTAL_DATE_REF AS (

 SELECT DATEADD(HOUR, -12, CURRENT_TIMESTAMP) AS INCREMENTAL_DELTA

),INCREMENTAL_RECORDS_TABLE AS (
    
SELECT
E.PAYMENT_ID
FROM RAW_PROD.CES_MSCM_KAFKA.PYMT_EVENT E  --20 M ROWS
LEFT JOIN RAW_PROD.CES_MSCM_KAFKA.PYMT_EVENT_AMT_TO_PAY AS ATP   --60 M ROWS
ON E.PAYMENT_ID = ATP.PAYMENT_ID AND ATP.KAFKA_DATETIME   >= (SELECT INCREMENTAL_DELTA FROM INCREMENTAL_DATE_REF)
LEFT JOIN RAW_PROD.CES_MSCM_KAFKA.PYMT_EVENT_REFUND_ITEMS AS R  --60 M ROWS
ON E.TRANSACTION_ID = R.TRANSACTION_ID AND R.KAFKA_DATETIME   >= (SELECT INCREMENTAL_DELTA FROM INCREMENTAL_DATE_REF)
LEFT JOIN RAW_PROD.CES_MSCM_ORACLE.MDT_PARTICIPANT_SITES PS_C
ON E.CONSUMER_ID = PS_C.SITE_NUMBER
LEFT JOIN RAW_PROD.CES_MSCM_ORACLE.MDT_PARTICIPANT_SITES PS_CRP
ON E.CRP_SITE_NUMBER = PS_CRP.SITE_NUMBER
LEFT JOIN (
    SELECT
    C.FIRST_NAME,
    C.LAST_NAME,
    LOWER(C.EMAIL) AS EMAIL,
    C.LAST_MODIFIED_ON
    FROM RAW_PROD.CES_MSCM_ORACLE.MDT_CONTACTS C
    WHERE ACTIVE = 1
    QUALIFY ROW_NUMBER() OVER (PARTITION BY LOWER(C.EMAIL) ORDER BY C.LAST_MODIFIED_ON DESC) = 1
        ) CC
ON LOWER(PS_CRP.ATTRIBUTE2) = CC.EMAIL
LEFT JOIN (
    SELECT
    H.PYMT_TRXN_HEADER_ID,
    H.PAY_REF_NUMBER,
    H.POS_TXN_NUM,
    H.LAST_MODIFIED_ON
    FROM RAW_PROD.CES_MSCM_ORACLE.PYMT_TRANSACTION_HEADERS AS H
    QUALIFY RANK() OVER (PARTITION BY H.POS_TXN_NUM ORDER BY H.PYMT_TRXN_HEADER_ID DESC) = 1
        ) PTH
ON E.TRANSACTION_ID = PTH.POS_TXN_NUM
WHERE 
(E.KAFKA_DATETIME >= (SELECT INCREMENTAL_DELTA FROM INCREMENTAL_DATE_REF)
OR PS_C.LAST_MODIFIED_ON  >= (SELECT INCREMENTAL_DELTA FROM INCREMENTAL_DATE_REF)
OR CC.LAST_MODIFIED_ON    >= (SELECT INCREMENTAL_DELTA FROM INCREMENTAL_DATE_REF)
OR PTH.LAST_MODIFIED_ON   >= (SELECT INCREMENTAL_DELTA FROM INCREMENTAL_DATE_REF)
OR ATP.KAFKA_DATETIME   >= (SELECT INCREMENTAL_DELTA FROM INCREMENTAL_DATE_REF)
OR R.KAFKA_DATETIME   >= (SELECT INCREMENTAL_DELTA FROM INCREMENTAL_DATE_REF))
AND E.KAFKA_DATETIME >= CONVERT_TIMEZONE('Australia/Sydney', 'UTC', TO_TIMESTAMP('2023-09-24 00:00:00'))
AND E.PAYMENT_METHOD <> 'CASH'
GROUP BY E.PAYMENT_ID
), FIN_RTP_KAFKA AS (

SELECT
E.MULTI_SCHEME_ID  AS MULTI_SCHEME_ID 
, SCHEME.NAME AS SCHEME
, E.KAFKA_ID AS ID
, E.TRANSACTION_ID AS POS_TXN_NUM
, ATP.ID AS INCREMENTAL_ID
, E.PAYMENT_ID AS PAYMENT_ID
, E.TRANSACTION_TYPE AS TRANSACTION_TYPE
, E.PAYMENT_METHOD AS PAYMENT_METHOD
, E.CONSUMER_ID AS CONSUMER_ID
, PS_C.SITE_NAME AS CONSUMER_NAME
, E.RECIPIENT_PARTICIPANT_NUMBER AS RECIPIENT_PARTICIPANT_NUMBER
, NVL(E.RECIPIENT_SITE_NUMBER, E.RECIPIENT_PARTICIPANT_NUMBER) AS RECIPIENT_SITE_NUMBER
, PS_R.SITE_NAME AS RECIPIENT_NAME
, E.RECIPIENT_TYPE AS RECIPIENT_TYPE
, E.CRP_SITE_NUMBER AS CRP_SITE_NUMBER
, PS_CRP.SITE_NAME AS CRP_SITE_NAME
, CC.FIRST_NAME || ' ' || CC.LAST_NAME AS SITE_CONTRACT_MANAGER_NAME
, PS_CRP.SITE_ADDR_CONTACT_EMAIL AS EMAIL
, PS_CRP.PO_COMMUNICATION_EMAIL AS PO_COMMUNICATION_EMAIL
, NVL(ATP.MATERIAL_TYPE_ID, R.MATERIAL_TYPE_ID) AS MATERIAL_TYPE_ID

, CONVERT_TIMEZONE('UTC', SCHEME.TIMEZONE, E.TRANSACTION_DATE)  AS PAYMENT_PERIOD
, E.KAFKA_DATETIME AS PERIOD
, ATP.AMOUNT_TO_PAY AS AMOUNT_TO_PAY
, R.CONTAINER_COUNT AS VOLUME
, R.TOTAL_AMOUNT AS GROSS_AMOUNT
, CASE WHEN PYMT.VOID = 'VOID' THEN 'VOIDED' ELSE 'NOT VOIDED' END AS VOID_STATUS
, E.PAY_REF_NUMBER AS PAY_REF_NUMBER
, CASE WHEN PYMT.PAID = 'PAID' THEN 'Y' ELSE 'N' END AS PAID
, CASE WHEN NVL(PYMT.INVOICED, POS_STATUS.INVOICED) = 'INVOICED' THEN 'Y' ELSE 'N' END AS INVOICED
--/*CHECK*/, CASE WHEN NVL(PYMT.INVOICED, POS_STATUS.INVOICED) = 'INVOICED' THEN 'Y' ELSE 'N' END AS INVOICED
, CASE WHEN NVL(PYMT.ERP_PAYMENT_COMPLETE, POS_STATUS.ERP_PAYMENT_COMPLETE) = 'ERP PAYMENT COMPLETED' THEN 'Y' ELSE 'N' END AS ERP_PAID
, E.TOTAL_AMOUNT_TO_PAY AS PAYMENT_AMOUNT

--/*CHECK*/, SUM(ATP.AMOUNT_TO_PAY) OVER (PARTITION BY E.PAYMENT_ID) AS PAYMENT_LINE_AGG

,E.MODIFIED_BY
, SCHEME.TIMEZONE
, E.KAFKA_DATETIME

, CASE WHEN E.STATUS IN ('APPROVED', 'PAID') THEN 'Y' ELSE 'N' END AS APPROVAL_FLAG
, E.PASSED AS WF_RULES_PASSED
, E.PAYRUN_STATUS AS PAYRUN_STATUS
, CONVERT_TIMEZONE('UTC', SCHEME.TIMEZONE, E.PAYMENTS_CREATED_ON_AND_BEFORE) AS PAYRUN_CREATED_ON
, E.TODAY_ORDER AS TODAY_ORDER
, TO_CHAR(CONVERT_TIMEZONE('UTC', SCHEME.TIMEZONE, E.PAYMENTS_CREATED_ON_AND_BEFORE), 'YYYY-MM-DD') || ' (' || E.TODAY_ORDER || ')' AS PAYRUN_ON_THE_PORTAL

,E.PAYRUN_ID

, CONVERT_TIMEZONE('UTC',SCHEME.TIMEZONE,CAST(PYMT.PAID_DATE AS TIMESTAMP)) AS PAID_DATE
, TO_CHAR(CONVERT_TIMEZONE('UTC',SCHEME.TIMEZONE,CAST(PYMT.PAID_DATE AS TIMESTAMP)),'YYYYMMDD') AS PAID_DATE_KEY
, PYMT.VOID AS VOID
, CONVERT_TIMEZONE('UTC',SCHEME.TIMEZONE,CAST(PYMT.VOIDED_DATE AS TIMESTAMP)) AS VOIDED_DATE
, COALESCE(PYMT.PAID, PYMT.PAYMENT_ERROR, 'NOT PAID') AS PAYMENT_STATUS
, CASE WHEN E.STATUS = 'PAID' THEN NULL ELSE E.STATUS END AS APPROVAL_STATUS

,E.STATUS
,E.KAFKA_ID

, COALESCE(PYMT.INVOICED, PYMT.ERROR_INV_ERP, POS_STATUS.INVOICED, 'NOT INVOICED') AS COMPLETE_STATUS
--/*CHECK*/, COALESCE(PYMT.INVOICED, PYMT.ERROR_INV_ERP, POS_STATUS.INVOICED, 'NOT INVOICED') AS COMPLETE_STATUS
, E.PAYRUN_ID AS NOTIFICATION_ID
, COALESCE(PYMT.ERP_PAYMENT_COMPLETE, PYMT.ERROR_PAY_ERP, PYMT.NO_VALID_ERP_BNK, POS_STATUS.ERP_PAYMENT_COMPLETE, 'NO ERP PAYMENT') AS ERP_PAYMENT_STATUS
, COALESCE(INV.INVOICE_AMOUNT, INV_POS.INVOICE_AMOUNT) AS INVOICE_AMOUNT
, COALESCE(INV.INVOICE_NUMBER_AND_STATUS, INV_POS.INVOICE_NUMBER_AND_STATUS) AS INVOICE_NUMBER_AND_STATUS
, CASE WHEN COALESCE(PYMT.INVOICED, PYMT.ERROR_INV_ERP, POS_STATUS.INVOICED, 'NOT INVOICED') = 'INVOICED' OR COALESCE(PYMT.INVOICED, PYMT.ERROR_INV_ERP, POS_STATUS.INVOICED, 'NOT INVOICED') LIKE '%ERROR%' THEN COALESCE(PYMT.INVOICED, PYMT.ERROR_INV_ERP, POS_STATUS.INVOICED, 'NOT INVOICED') ELSE 'NOT INVOICED' END AS INVOICE_STATUS
--/*CHECK*/, CASE WHEN COALESCE(PYMT.INVOICED, PYMT.ERROR_INV_ERP, POS_STATUS.INVOICED, 'NOT INVOICED') = 'INVOICED' OR COALESCE(PYMT.INVOICED, PYMT.ERROR_INV_ERP, POS_STATUS.INVOICED, 'NOT INVOICED') LIKE '%ERROR%' THEN COALESCE(PYMT.INVOICED, PYMT.ERROR_INV_ERP, POS_STATUS.INVOICED, 'NOT INVOICED') ELSE 'NOT INVOICED' END AS INVOICE_STATUS
, NVL2(E.PAYRUN_ID, 'Y', 'N') AS NOTIFICATION_ID_ASSIGNED_FLAG
, CASE WHEN E.STATUS NOT IN ('APPROVED', 'PAID') THEN 'Payment Without Approval' WHEN E.STATUS IN ('APPROVED', 'PAID') THEN 'Workflow Amount' ELSE '-' END AS WORKFLOW_STATUS
, CASE WHEN NVL(PYMT.INVOICED, POS_STATUS.INVOICED) = 'INVOICED' THEN 'Invoiced' ELSE 'Not Invoiced' END AS ERP_INVOICE_STATUS_VOID
--/*CHECK*/, CASE WHEN NVL(PYMT.INVOICED, POS_STATUS.INVOICED) = 'INVOICED' THEN 'Invoiced' ELSE 'Not Invoiced' END AS ERP_INVOICE_STATUS_VOID
, CASE WHEN NVL(PYMT.ERP_PAYMENT_COMPLETE, POS_STATUS.ERP_PAYMENT_COMPLETE) = 'ERP PAYMENT COMPLETED' THEN 'ERP Payment Completed' ELSE 'No ERP Payment' END AS ERP_PAYMENT_STATUS_VOID
, CASE WHEN PYMT.VOID = 'VOID' THEN 'Return from Bank' WHEN PYMT.PAID = 'PAID' THEN 'Paid' ELSE 'Not Paid' END AS PAYMENT_STATUS_VOID
, 'Amount to Pay' AS AMOUNT_TO_PAY_HEADER
, 'Gross Amount' AS GROSS_AMOUNT_HEADER
, 'Volume' AS VOLUME_HEADER
, 'Number of Transactions' AS NUMBER_OF_TRANSACTIONS_HEADER
, SYSDATE() AS INSERT_DATE_UTC

, CASE WHEN COALESCE(PYMT.INVOICED, PYMT.ERROR_INV_ERP, POS_STATUS.INVOICED, 'NOT INVOICED') = 'INVOICED'
    AND COALESCE(PYMT.PAID, PYMT.PAYMENT_ERROR, 'NOT PAID') = 'PAID'
    AND COALESCE(PYMT.ERP_PAYMENT_COMPLETE, PYMT.ERROR_PAY_ERP, PYMT.NO_VALID_ERP_BNK, POS_STATUS.ERP_PAYMENT_COMPLETE, 'NO ERP PAYMENT') = 'ERP PAYMENT COMPLETED'
    AND E.TOTAL_AMOUNT_TO_PAY = COALESCE(INV.INVOICE_AMOUNT, INV_POS.INVOICE_AMOUNT)
    THEN 'Reconciled Amount'
    ELSE (CASE WHEN E.TOTAL_AMOUNT_TO_PAY > COALESCE(INV.INVOICE_AMOUNT, INV_POS.INVOICE_AMOUNT)
        THEN 'PAAS Amount is More Than ERP'
        WHEN E.TOTAL_AMOUNT_TO_PAY < COALESCE(INV.INVOICE_AMOUNT, INV_POS.INVOICE_AMOUNT)
        THEN 'PAAS Amount is Less Than ERP'
        ELSE 'Other Unreconciled Amount' END
        )
    END AS RECONCILIATION_FLAG
, CASE WHEN COALESCE(PYMT.INVOICED, PYMT.ERROR_INV_ERP, POS_STATUS.INVOICED, 'NOT INVOICED') = 'INVOICED'
    AND COALESCE(PYMT.PAID, PYMT.PAYMENT_ERROR, 'NOT PAID') = 'PAID'
    AND COALESCE(PYMT.ERP_PAYMENT_COMPLETE, PYMT.ERROR_PAY_ERP, PYMT.NO_VALID_ERP_BNK, POS_STATUS.ERP_PAYMENT_COMPLETE, 'NO ERP PAYMENT') = 'ERP PAYMENT COMPLETED'
    AND E.TOTAL_AMOUNT_TO_PAY = COALESCE(INV.INVOICE_AMOUNT, INV_POS.INVOICE_AMOUNT)
    THEN 'Reconciled Amount'
    ELSE 'Unreconciled Amount'
    END AS RECONCILIATION_FLAG_SIMPLE
FROM
RAW_PROD.CES_MSCM_KAFKA.PYMT_EVENT AS E
LEFT JOIN RAW_PROD.CES_MSCM_KAFKA.PYMT_EVENT_AMT_TO_PAY AS ATP
ON E.PAYMENT_ID = ATP.PAYMENT_ID
LEFT JOIN RAW_PROD.CES_MSCM_KAFKA.PYMT_EVENT_REFUND_ITEMS AS R
ON E.TRANSACTION_ID = R.TRANSACTION_ID
LEFT JOIN RAW_PROD.CES_MSCM_ORACLE.MDT_PARTICIPANT_SITES AS PS_C
ON E.CONSUMER_ID = PS_C.SITE_NUMBER
LEFT JOIN RAW_PROD.CES_MSCM_ORACLE.MDT_PARTICIPANT_SITES AS PS_R
ON NVL(E.RECIPIENT_SITE_NUMBER, E.RECIPIENT_PARTICIPANT_NUMBER) = PS_R.SITE_NUMBER
LEFT JOIN RAW_PROD.CES_MSCM_ORACLE.MDT_PARTICIPANT_SITES AS PS_CRP
ON E.CRP_SITE_NUMBER = PS_CRP.SITE_NUMBER
LEFT JOIN (
    SELECT
    C.FIRST_NAME,
    C.LAST_NAME,
    LOWER(C.EMAIL) AS EMAIL
    FROM RAW_PROD.CES_MSCM_ORACLE.MDT_CONTACTS AS C
    WHERE ACTIVE = 1
    QUALIFY ROW_NUMBER() OVER (PARTITION BY LOWER(C.EMAIL) ORDER BY C.LAST_MODIFIED_ON DESC) = 1
    ) CC
ON LOWER(PS_CRP.ATTRIBUTE2) = CC.EMAIL
LEFT JOIN (
    SELECT
    H.PYMT_TRXN_HEADER_ID,
    H.PAY_REF_NUMBER,
    H.POS_TXN_NUM
    FROM RAW_PROD.CES_MSCM_ORACLE.PYMT_TRANSACTION_HEADERS AS H
    QUALIFY RANK() OVER (PARTITION BY H.POS_TXN_NUM ORDER BY H.PYMT_TRXN_HEADER_ID DESC) = 1
) PTH
ON E.TRANSACTION_ID = PTH.POS_TXN_NUM
LEFT JOIN PYMT_STATUS AS PYMT   
ON TO_CHAR(PTH.PYMT_TRXN_HEADER_ID) = TO_CHAR(PYMT.ID)
AND PYMT.ID_TYPE = 'PYMT_TRXN_HEADER_ID'
LEFT JOIN PYMT_STATUS AS POS_STATUS  
ON TO_CHAR(E.TRANSACTION_ID) = TO_CHAR(POS_STATUS.ID)
AND POS_STATUS.ID_TYPE = 'POS_TXN_NUM'
LEFT JOIN COMMON_PROD.DWH.INV_AMOUNT AS INV 
ON TO_CHAR(PTH.PYMT_TRXN_HEADER_ID) = TO_CHAR(INV.ID)
AND INV.ID_TYPE = 'PYMT_TRXN_HEADER_ID'
LEFT JOIN COMMON_PROD.DWH.INV_AMOUNT AS INV_POS 
ON TO_CHAR(E.TRANSACTION_ID) = TO_CHAR(INV_POS.ID)
AND INV_POS.ID_TYPE = 'POS_TXN_NUM'
INNER JOIN RAW_PROD.CES_MSCM_ORACLE.SCHEME AS SCHEME 
ON E.MULTI_SCHEME_ID = SCHEME.MULTI_SCHEME_ID

INNER JOIN INCREMENTAL_RECORDS_TABLE IT
ON E.PAYMENT_ID = IT.PAYMENT_ID

WHERE 1 = 1
AND (
    ATP.MATERIAL_TYPE_ID = R.MATERIAL_TYPE_ID
    OR ATP.MATERIAL_TYPE_ID IS NULL
    OR R.MATERIAL_TYPE_ID IS NULL
)


AND (DATEADD(DAY,14,CONVERT_TIMEZONE('UTC',SCHEME.TIMEZONE,CAST(PYMT.PAID_DATE AS TIMESTAMP))) >= SYSDATE() 
OR (PYMT.PAID_DATE IS NULL AND DATEADD(DAY,15,CONVERT_TIMEZONE('UTC', 'Australia/Sydney', E.KAFKA_DATETIME)) >= SYSDATE()))



),  AGG_QUERY AS (

SELECT
E.MULTI_SCHEME_ID 
, E.SCHEME
, E.ID
, E.KAFKA_ID
, E.POS_TXN_NUM
, E.INCREMENTAL_ID
, E.PAYMENT_ID
, E.TRANSACTION_TYPE
, E.PAYMENT_METHOD
, E.CONSUMER_ID
, E.CONSUMER_NAME
, E.RECIPIENT_PARTICIPANT_NUMBER
, E.RECIPIENT_SITE_NUMBER
, E.RECIPIENT_NAME
, E.RECIPIENT_TYPE
, E.CRP_SITE_NUMBER
, E.CRP_SITE_NAME
, E.SITE_CONTRACT_MANAGER_NAME
, E.EMAIL
, E.PO_COMMUNICATION_EMAIL
, E.MATERIAL_TYPE_ID
, E.PAYMENT_PERIOD
, E.PERIOD
, E.AMOUNT_TO_PAY
, E.VOLUME
, E.GROSS_AMOUNT
, E.VOID_STATUS
, E.PAY_REF_NUMBER
, E.PAID
, E.INVOICED
, E.ERP_PAID
, E.PAYMENT_AMOUNT
--window functions
, FIRST_VALUE(E.MODIFIED_BY) OVER (PARTITION BY E.PAYMENT_ID ORDER BY E.KAFKA_DATETIME) AS CREATED_BY
, CONVERT_TIMEZONE('UTC', E.TIMEZONE, MIN(E.KAFKA_DATETIME) OVER (PARTITION BY E.PAYMENT_ID)) AS CREATED_ON
, MIN(E.KAFKA_DATETIME) OVER (PARTITION BY E.PAYMENT_ID) AS CREATED_ON_UTC
, LAST_VALUE(E.MODIFIED_BY) OVER (PARTITION BY E.PAYMENT_ID ORDER BY E.KAFKA_DATETIME) AS LAST_MODIFIED_BY
, MAX(E.KAFKA_DATETIME) OVER (PARTITION BY E.PAYMENT_ID) AS LAST_MODIFIED_ON_UTC
, E.APPROVAL_FLAG
, E.WF_RULES_PASSED
, E.PAYRUN_STATUS
, E.PAYRUN_CREATED_ON
, E.TODAY_ORDER
, E.PAYRUN_ON_THE_PORTAL
, CASE WHEN TO_CHAR(CONVERT_TIMEZONE('UTC', 'Australia/Sydney', MIN(E.KAFKA_DATETIME) OVER (PARTITION BY E.PAYMENT_ID)), 'YYYYMMDDHH') >= TO_CHAR(CONVERT_TIMEZONE('UTC', 'Australia/Sydney', SYSDATE()), 'YYYYMMDD') || '03' AND E.PAYRUN_ID IS NULL THEN 1 ELSE 0 END AS TODAY_NEW_PAYMENT_FLAG
, E.PAID_DATE
, E.PAID_DATE_KEY
, E.VOID
, E.VOIDED_DATE
, E.PAYMENT_STATUS
, E.APPROVAL_STATUS
--window function
, LAST_VALUE(CASE WHEN E.STATUS = 'APPROVED' THEN E.MODIFIED_BY ELSE NULL END) IGNORE NULLS OVER (PARTITION BY E.PAYMENT_ID ORDER BY E.KAFKA_DATETIME) AS CURRENT_APPROVAL_LEVEL
, CONVERT_TIMEZONE('UTC', 'Australia/Sydney', MAX(CASE WHEN E.STATUS = 'APPROVED' THEN E.KAFKA_DATETIME ELSE NULL END) OVER (PARTITION BY E.PAYMENT_ID)) AS APPROVAL_LAST_MODIFIED_ON_SYD
, E.COMPLETE_STATUS
, E.NOTIFICATION_ID
, E.ERP_PAYMENT_STATUS
, E.INVOICE_AMOUNT
, E.INVOICE_NUMBER_AND_STATUS
, E.INVOICE_STATUS
, E.NOTIFICATION_ID_ASSIGNED_FLAG
, E.WORKFLOW_STATUS
, E.ERP_INVOICE_STATUS_VOID
, E.ERP_PAYMENT_STATUS_VOID
, E.PAYMENT_STATUS_VOID
, E.AMOUNT_TO_PAY_HEADER
, E.GROSS_AMOUNT_HEADER
, E.VOLUME_HEADER
, E.NUMBER_OF_TRANSACTIONS_HEADER
, E.INSERT_DATE_UTC
--window function
, RANK() OVER (PARTITION BY E.PAYMENT_ID ORDER BY E.KAFKA_DATETIME DESC) AS PYMT_AMOUNT_RECENT_FLAG
, E.RECONCILIATION_FLAG
, E.RECONCILIATION_FLAG_SIMPLE
FROM FIN_RTP_KAFKA AS E

QUALIFY PYMT_AMOUNT_RECENT_FLAG = 1

), SUM_AMT_TO_PAY_QUERY AS (

SELECT
PAYMENT_ID, 
SUM(AMOUNT_TO_PAY) PAYMENT_LINE_AGG
FROM FIN_RTP_KAFKA  -- NOT FROM AGGREGATED RESULT, THIS IS A SUM FOR ALL LINES INCLUDING NON-RECENT ONES (WITH DUPE ATPID)
GROUP BY PAYMENT_ID

), LINE_NUNMBER_QUERY AS (

SELECT
INCREMENTAL_ID, 
ROW_NUMBER() OVER (PARTITION BY KAFKA_ID ORDER BY INCREMENTAL_ID) AS LINE_NUM
FROM AGG_QUERY

)
SELECT 
E.MULTI_SCHEME_ID 
, E.SCHEME
, E.ID
, E.POS_TXN_NUM
, E.INCREMENTAL_ID
, E.PAYMENT_ID
, E.TRANSACTION_TYPE
, E.PAYMENT_METHOD
, E.CONSUMER_ID
, E.CONSUMER_NAME
, E.RECIPIENT_PARTICIPANT_NUMBER
, E.RECIPIENT_SITE_NUMBER
, E.RECIPIENT_NAME
, E.RECIPIENT_TYPE
, E.CRP_SITE_NUMBER
, E.CRP_SITE_NAME
, E.SITE_CONTRACT_MANAGER_NAME
, E.EMAIL
, E.PO_COMMUNICATION_EMAIL
, E.MATERIAL_TYPE_ID
--window function
, L.LINE_NUM  --, ROW_NUMBER() OVER (PARTITION BY E.KAFKA_ID ORDER BY ATP.ID) AS LINE_NUM
, E.PAYMENT_PERIOD
, E.PERIOD
, E.AMOUNT_TO_PAY
, E.VOLUME
, E.GROSS_AMOUNT
, E.VOID_STATUS
, E.PAY_REF_NUMBER
, E.PAID
, E.INVOICED
, E.ERP_PAID
, E.PAYMENT_AMOUNT
--window functions
,S.PAYMENT_LINE_AGG --, SUM(ATP.AMOUNT_TO_PAY) OVER (PARTITION BY E.PAYMENT_ID) AS PAYMENT_LINE_AGG
, E.CREATED_BY 
, E.CREATED_ON 
, E.CREATED_ON_UTC
, E.LAST_MODIFIED_BY
, E.LAST_MODIFIED_ON_UTC
, E.APPROVAL_FLAG
, E.WF_RULES_PASSED
, E.PAYRUN_STATUS
, E.PAYRUN_CREATED_ON
, E.TODAY_ORDER
, E.PAYRUN_ON_THE_PORTAL
, E.TODAY_NEW_PAYMENT_FLAG
, E.PAID_DATE
, E.PAID_DATE_KEY
, E.VOID
, E.VOIDED_DATE
, E.PAYMENT_STATUS
, E.APPROVAL_STATUS
--window function
, E.CURRENT_APPROVAL_LEVEL
, E.APPROVAL_LAST_MODIFIED_ON_SYD
, E.COMPLETE_STATUS
, E.NOTIFICATION_ID
, E.ERP_PAYMENT_STATUS
, E.INVOICE_AMOUNT
, E.INVOICE_NUMBER_AND_STATUS
, E.INVOICE_STATUS
, E.NOTIFICATION_ID_ASSIGNED_FLAG
, E.WORKFLOW_STATUS
, E.ERP_INVOICE_STATUS_VOID
, E.ERP_PAYMENT_STATUS_VOID
, E.PAYMENT_STATUS_VOID
, E.AMOUNT_TO_PAY_HEADER
, E.GROSS_AMOUNT_HEADER
, E.VOLUME_HEADER
, E.NUMBER_OF_TRANSACTIONS_HEADER
, E.INSERT_DATE_UTC
--window function
, E.PYMT_AMOUNT_RECENT_FLAG
, E.RECONCILIATION_FLAG
, E.RECONCILIATION_FLAG_SIMPLE

FROM AGG_QUERY E
LEFT JOIN SUM_AMT_TO_PAY_QUERY S
ON E.PAYMENT_ID = S.PAYMENT_ID
LEFT JOIN LINE_NUNMBER_QUERY L
ON E.INCREMENTAL_ID = L.INCREMENTAL_ID


)

WHERE PAYMENT_ID = '8ad39fdf-a7a1-41c6-baee-1aed48bb96f7'




;
