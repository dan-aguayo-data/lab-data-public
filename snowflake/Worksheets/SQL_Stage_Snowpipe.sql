USE ROLE SYSADMIN;

USE DATABASE LANDING;

USE SCHEMA SNOWPIPE_DEV;




// Creating file format object
CREATE OR REPLACE file format LANDING.SNOWPIPE_DEV.CSV_FORMAT
TYPE = 'CSV'
field_delimiter=',' 
skip_header=1 ;
// Defining properties on creation of file format object   
CREATE OR REPLACE file format LANDING.SNOWPIPE_DEV.JSON_FORMAT
    TYPE= 'JSON',
    TIME_FORMAT=AUTO;  
    
// See properties of file format object
DESC file format LANDING.SNOWPIPE_DEV.CSV_FORMAT;
-- CREATE OR REPLACE file format LANDING.SNOWPIPE_DEV.CSV_FORMAT
-- SKIP_HEADER = 2


// See properties of file format object
DESC file format LANDING.SNOWPIPE_DEV.JSON_FORMAT;
// Show all named stages
SHOW STAGES;

-- // List files in user stage;
-- LIST @~;
-- // List files in user stage;
-- LIST @%LOAN_PAYMENT;


-- CREATE OR REPLACE STORAGE INTEGRATION ENCRYPTION_INTEGRATION_TEST
--   TYPE = EXTERNAL_STAGE
--   STORAGE_PROVIDER = AZURE
--   ENABLED = TRUE
--   AZURE_TENANT_ID =  'abf0de66-3ab3-4ea3-b35e-502502be1261'   --can be found in account active directory in the initial overview page
--   STORAGE_ALLOWED_LOCATIONS = ( 'azure://cesencryptiontest.blob.core.windows.net/csv-encryption','azure://cesencryptiontest.blob.core.windows.net/json-encryption' )  
  ;

DESC STORAGE INTEGRATION ENCRYPTION_INTEGRATION_TEST;



CREATE OR REPLACE STAGE LANDING.SNOWPIPE_DEV.CES_AZ_ENCRYPTION_CSV_TEST
    URL = 'azure://cesencryptiontest.blob.core.windows.net/csv-encryption'
    CREDENTIALS = (azure_sas_token='?sv=2023-01-03&ss=btqf&srt=sco&spr=https%2Chttp&st=2024-05-27T04%3A29%3A24Z&se=2024-07-31T04%3A29%3A00Z&sp=rl&sig=SUCBTymPDw2W5wGfTtQghpyvajlhJIwM6UYScIO4%2BDU%3D')
    FILE_FORMAT = LANDING.SNOWPIPE_DEV.CSV_FORMAT;
    
ls @LANDING.SNOWPIPE_DEV.CES_AZ_ENCRYPTION_CSV_TEST;

    
CREATE OR REPLACE STAGE LANDING.SNOWPIPE_DEV.CES_AZ_ENCRYPTION_CSV_TEST
    URL = 'azure://cesencryptiontest.blob.core.windows.net/csv-encryption'
--STORAGE_INTEGRATION = 'ENCRYPTION_INTEGRATION_TEST' -- THIS GOES INSTEAD OF CREDENTIAL WHEN ENABLES
     FILE_FORMAT = LANDING.SNOWPIPE_DEV.CSV_FORMAt; 

     
DESC STAGE LANDING.SNOWPIPE_DEV.CES_AZ_ENCRYPTION_CSV_TEST; 

CREATE OR REPLACE STAGE LANDING.SNOWPIPE_DEV.CES_AZ_ENCRYPTION_JSON_TEST
    URL = 'azure://cesencryptiontest.blob.core.windows.net/json-encryption'
    CREDENTIALS = (azure_sas_token='?sv=2023-01-03&ss=btqf&srt=sco&spr=https%2Chttp&st=2024-05-27T04%3A29%3A24Z&se=2024-07-31T04%3A29%3A00Z&sp=rl&sig=SUCBTymPDw2W5wGfTtQghpyvajlhJIwM6UYScIO4%2BDU%3D')
    FILE_FORMAT = LANDING.SNOWPIPE_DEV.JSON_FORMAT;

    ls @LANDING.SNOWPIPE_DEV.CES_AZ_ENCRYPTION_JSON_TEST;
;  

// Specifying file_format in Copy command
COPY INTO OUR_FIRST_DB.PUBLIC.ORDERS
    FROM @MANAGE_DB.external_stages.azure_stage
    files = ('delivery-tracker-output.csv');
    


// Alter external stage   

ALTER STAGE azure_stage SET credentials=(azure_sas_token='sv=2023-01-03&spr=https%2Chttp&si=Snowglake_first_stage&sr=c&sig=Zx0ncIMC2BuSyarBY3Z53uem7TWJ8XrVKWMWWgkxq88%3D');
ALTER STAGE azure_stage SET  url='azure://dandevtrainingaus.blob.core.windows.net/dev-snow-test';
    

;




/*CSV PIPE CREATION */



--TEST filtering of the patter of files to grab
ls @LANDING.SNOWPIPE_DEV.CES_AZ_ENCRYPTION_CSV_TEST PATTERN= '.*.Json'; 
ls @LANDING.SNOWPIPE_DEV.CES_AZ_ENCRYPTION_CSV_TEST   ;
ls @LANDING.SNOWPIPE_DEV.CES_AZ_ENCRYPTION_CSV_TEST PATTERN='.*users/.*.json' ;
ls @LANDING.SNOWPIPE_DEV.CES_AZ_ENCRYPTION_CSV_TEST PATTERN='.*groupmembers/.*.json' ;
ls @LANDING.SNOWPIPE_DEV.CES_AZ_ENCRYPTION_CSV_TEST PATTERN='.*.txt';



SELECT METADATA$FILENAME, METADATA$FILE_ROW_NUMBER, sysdate()::timestamp, t.$1, t.$2, t.$3,  t.$4,t.$5 ,t.$6 ,t.$7 ,t.$8 ,t.$9 ,t.$10 ,t.$11
from @LANDING.SNOWPIPE_DEV.CES_AZ_ENCRYPTION_CSV_TEST (FILE_FORMAT => 'LANDING.SNOWPIPE_DEV.CSV_FORMAT', PATTERN => '.*csv') t ;


copy into LANDING.SNOWPIPE_DEV.ENCRYPTION_CSV(FILE_NAME, FILE_ROW_NUM, LANDED_DATETIME, ID,	CHECK_NUMBER,	INVOICE_DATE,	INVOICE_ENTERED_DATE,	INVOICE_ID,	INVOICE_NUMBER,	PAYMENT_TERMS,	DUE_DATE,	PAYMENT_DATE,	PAYMENT_STATUS,	BU_NAME)
FROM (SELECT METADATA$FILENAME, METADATA$FILE_ROW_NUMBER, sysdate()::timestamp, t.$1, t.$2, t.$3,  t.$4,t.$5 ,t.$6 ,t.$7 ,t.$8 ,t.$9 ,t.$10 ,t.$11
from @LANDING.SNOWPIPE_DEV.CES_AZ_ENCRYPTION_CSV_TEST (FILE_FORMAT => 'LANDING.SNOWPIPE_DEV.CSV_FORMAT', PATTERN => '.*csv') t) ON_ERROR = 'CONTINUE';
-- file_format = (type = JSON, compression = Auto) on_error = 'skip_file';



CREATE OR REPLACE TABLE LANDING.SNOWPIPE_DEV.ENCRYPTION_CSV (
    FILE_NAME STRING,
    FILE_ROW_NUM INT,
    LANDED_DATETIME TIMESTAMP_TZ,
    ID STRING,
    CHECK_NUMBER STRING,
    INVOICE_DATE STRING,
    INVOICE_ENTERED_DATE TIMESTAMP_TZ,
    INVOICE_ID STRING,
    INVOICE_NUMBER STRING,
    PAYMENT_TERMS STRING,
    DUE_DATE STRING,
    PAYMENT_DATE STRING,
    PAYMENT_STATUS STRING,
    BU_NAME STRING
);
--DROP TABLE LANDING.SNOWPIPE_DEV.ENCRYPTION_CSV  ;

show notification integrations;
;

CREATE OR REPLACE NOTIFICATION INTEGRATION ENCRYPTION_TEST_NOTIFICATION
TYPE = QUEUE
ENABLED = TRUE
NOTIFICATION_PROVIDER = AZURE_STORAGE_QUEUE
AZURE_STORAGE_QUEUE_PRIMARY_URI = 'https://cesencryptiontest.queue.core.windows.net/csv-encryptionqueue'
azure_tenant_id = 'abf0de66-3ab3-4ea3-b35e-502502be1261';
 
show notification integrations;
DESC NOTIFICATION integration encryption_test_notification;
DESC NOTIFICATION integration CES_CSV_PROD_NOTIFICATION;
DESC NOTIFICATION integration COEX_AD_NOTIFICATION;
--PIPE CREATION
 

create or replace pipe ENCRYPTION_CSV_TEST 
auto_ingest = true
integration = 'ENCRYPTION_TEST_NOTIFICATION'
as
copy into LANDING.SNOWPIPE_DEV.ENCRYPTION_CSV(FILE_NAME, FILE_ROW_NUM, LANDED_DATETIME, ID,	CHECK_NUMBER,	INVOICE_DATE,	INVOICE_ENTERED_DATE,	INVOICE_ID,	INVOICE_NUMBER,	PAYMENT_TERMS,	DUE_DATE,	PAYMENT_DATE,	PAYMENT_STATUS,	BU_NAME)
FROM (SELECT METADATA$FILENAME, METADATA$FILE_ROW_NUMBER, sysdate()::timestamp, t.$1, t.$2, t.$3,  t.$4,t.$5 ,t.$6 ,t.$7 ,t.$8 ,t.$9 ,t.$10 ,t.$11
from @LANDING.SNOWPIPE_DEV.CES_AZ_ENCRYPTION_CSV_TEST (FILE_FORMAT => 'LANDING.SNOWPIPE_DEV.CSV_FORMAT', PATTERN => '.*csv') t) ON_ERROR = 'CONTINUE';
 
select system$pipe_status('LANDING.SNOWPIPE_DEV.ENCRYPTION_CSV_TEST');
-- show pipes;
 desc pipe ENCRYPTION_CSV_TEST ;
-- desc pipe COEX_AD_PIPE; 


/*JSON CREATION */

--TEST filtering of the patter of files to grab
ls @LANDING.SNOWPIPE_DEV.CES_AZ_ENCRYPTION_JSON_TEST PATTERN= '.*.Json'; 
ls @LANDING.SNOWPIPE_DEV.CES_AZ_ENCRYPTION_CSV_TEST   ;
ls @LANDING.SNOWPIPE_DEV.CES_AZ_ENCRYPTION_CSV_TEST PATTERN='.*users/.*.json' ;
ls @LANDING.SNOWPIPE_DEV.CES_AZ_ENCRYPTION_CSV_TEST PATTERN='.*groupmembers/.*.json' ;
ls @LANDING.SNOWPIPE_DEV.CES_AZ_ENCRYPTION_CSV_TEST PATTERN='.*.txt';

SELECT METADATA$FILENAME, METADATA$FILE_ROW_NUMBER, sysdate()::timestamp, t.$1::VARIANT 
from @LANDING.SNOWPIPE_DEV.CES_AZ_ENCRYPTION_JSON_TEST (FILE_FORMAT => 'LANDING.SNOWPIPE_DEV.JSON_FORMAT', PATTERN => '.*json') t ;

-- FIX APPLIED TO BYPASS THE TXT FILE, $1 refers to the first JSON Column

SELECT METADATA$FILENAME, METADATA$FILE_ROW_NUMBER, sysdate()::timestamp, t.$1::VARIANT 
FROM @LANDING.SNOWPIPE_DEV.CES_AZ_ENCRYPTION_CSV_TEST (pattern=>'.*.csv') t;
 
SELECT METADATA$FILENAME, METADATA$FILE_ROW_NUMBER, sysdate()::timestamp, t.$1::VARIANT 
FROM @LANDING.SNOWPIPE_PROD.COEX_AD_STAGE  (pattern=>'.*groupmembers/.*.json') t;
 
SELECT METADATA$FILENAME, METADATA$FILE_ROW_NUMBER, sysdate()::timestamp, t.$1::VARIANT 
FROM @LANDING.SNOWPIPE_PROD.COEX_AD_STAGE  (pattern=>'.*groups/.*.json') t;
 



CREATE OR REPLACE TABLE LANDING.SNOWPIPE_DEV.ENCRYPTION_JSON
(
FILE_NAME  STRING, 
FILE_ROW_NUMBER INT, 
LANDED_DATETIME TIMESTAMP_TZ, 
MESSAGE VARIANT

);
 

copy into LANDING.SNOWPIPE_DEV.ENCRYPTION_JSON(FILE_NAME, FILE_ROW_NUMBER, LANDED_DATETIME, MESSAGE)
FROM (SELECT METADATA$FILENAME, METADATA$FILE_ROW_NUMBER, sysdate()::timestamp, t.$1::VARIANT 
from @LANDING.SNOWPIPE_DEV.CES_AZ_ENCRYPTION_JSON_TEST (FILE_FORMAT => 'LANDING.SNOWPIPE_DEV.JSON_FORMAT', PATTERN => '.*json') t )
 on_error = 'skip_file';
;
 
--Notification
 
create or replace notification integration encryption_test_notification_json
TYPE = QUEUE
ENABLED = TRUE
NOTIFICATION_PROVIDER = AZURE_STORAGE_QUEUE
AZURE_STORAGE_QUEUE_PRIMARY_URI = 'https://cesencryptiontest.queue.core.windows.net/json-encryptionqueue'
azure_tenant_id = 'abf0de66-3ab3-4ea3-b35e-502502be1261';
 
show notification integrations;
DESC NOTIFICATION INTEGRATION encryption_test_notification_json;
  
--PIPE

create or replace pipe ENCRYPTION_JSON_TEST
auto_ingest = true
integration = 'ENCRYPTION_TEST_NOTIFICATION_JSON'
as
copy into LANDING.SNOWPIPE_DEV.ENCRYPTION_JSON(FILE_NAME, FILE_ROW_NUMBER, LANDED_DATETIME, MESSAGE)
FROM (SELECT METADATA$FILENAME, METADATA$FILE_ROW_NUMBER, sysdate()::timestamp, t.$1::VARIANT 
from @LANDING.SNOWPIPE_DEV.CES_AZ_ENCRYPTION_JSON_TEST (FILE_FORMAT => 'LANDING.SNOWPIPE_DEV.JSON_FORMAT', PATTERN => '.*json') t )
 on_error = 'skip_file';
 
select system$pipe_status('LANDING.SNOWPIPE_DEV.ENCRYPTION_JSON_TEST');
show pipes;
desc pipe LANDING.SNOWPIPE_DEV.ENCRYPTION_JSON_TEST;
-- desc pipe COEX_AD_PIPE; 



--SHOW PIPES --

select * from LANDING.SNOWPIPE_DEV.CES_AZ_ENCRYPTION_CSV_TEST 
  where 
    FILE_NAME=(
      select FILE_NAME  from LANDING.SNOWPIPE_DEV.CES_AZ_ENCRYPTION_CSV_TEST
      where upper(FILE_NAME) like '%CSV%'
      QUALIFY row_number() OVER (PARTITION BY 'CES_AZ_ENCRYPTION_CSV_TEST' ORDER BY LANDED_DATETIME DESC) = 1
      ;


create or replace view LANDING.COEX_AD_PROD.COEX_AD_GROUP_MEMBERS(
	ID,
	GROUPID,
	GROUPNAME,
	MEMBERID,
	MEMBERNAME,
	VALUE
) as (
    


WITH source as (
    SELECT FILE_NAME, FILE_ROW_NUMBER, LANDED_DATETIME, f.VALUE
    FROM LANDING.SNOWPIPE_PROD.COEX_AD s,
    lateral flatten(input => s.MESSAGE:value) f
    where 
    FILE_NAME=(
      select FILE_NAME  from LANDING.SNOWPIPE_PROD.COEX_AD
      where upper(FILE_NAME) like '%/GROUPMEMBERS/%'
      QUALIFY row_number() OVER (PARTITION BY 'COEX_AD' ORDER BY LANDED_DATETIME DESC) = 1
    )
)
select
s.value:id::string||'-'||f.value:id::string as ID,  --added so we could have table primary key (normalized data)
s.value:id::string as GROUPID,
s.value:displayName::string as GROUPNAME,
f.value:id::string as MEMBERID,   
f.value:displayName::string as MEMBERNAME,
f.value 
from source as s,
lateral flatten(input => s.value:members) f
  );

select
split_part(FILE_NAME,'/',3) folder_name  -- get third object of path string
,*
from LANDING.SNOWPIPE_PROD.COEX_AD
order by folder_name  

;

/*QUERY TO READ CSV FILE INPUT */
select * from LANDING.SNOWPIPE_DEV.ENCRYPTION_CSV 
WHERE LANDED_DATETIME = (SELECT MAX(LANDED_DATETIME) FROM LANDING.SNOWPIPE_DEV.ENCRYPTION_CSV) ;



/*QUERY TO READ JSON FILE INPUT*/

WITH source as (
    SELECT FILE_NAME, FILE_ROW_NUMBER, LANDED_DATETIME, f.VALUE
    FROM LANDING.SNOWPIPE_DEV.ENCRYPTION_JSON s,
    lateral flatten(input => s.MESSAGE:value) f
    where 
    FILE_NAME=(
      select FILE_NAME  from LANDING.SNOWPIPE_DEV.ENCRYPTION_JSON
      QUALIFY row_number() OVER (PARTITION BY 'ENCRYPTION_JSON' ORDER BY LANDED_DATETIME DESC) = 1
    )
)
select
s.value:id::string as GROUPID,
s.value:displayName::string as GROUPNAME,
--f.value:id::string as MEMBERID,   
--f.value:displayName::string as MEMBERNAME,
s.value 
from source  s
--lateral flatten(input => s.value:members) f
  ;

SHOW STAGES;
  
show pipes; 

ls @LANDING.SNOWPIPE_PROD.CES_GREAT_EXPECTATIONS_PROD_STAGE  --order by last_modified desc

;



CREATE TABLE  LANDING.SNOWPIPE_DEV.CES_GREAT_EXPECTATIONS_DEV_ENCRYPT_TEST (
FILE_NAME STRING, 
FILE_ROW_NUMBER INT, 
LANDED_DATETIME TIMESTAMP_NTZ, 
MESSAGE VARIANT ) ;

copy into LANDING.SNOWPIPE_DEV.CES_GREAT_EXPECTATIONS_DEV_ENCRYPT_TEST (FILE_NAME, FILE_ROW_NUMBER, LANDED_DATETIME, MESSAGE) 
FROM (SELECT METADATA$FILENAME, METADATA$FILE_ROW_NUMBER, current_timestamp()::timestamp, t.$1::VARIANT 
FROM @LANDING.SNOWPIPE_PROD.CES_GREAT_EXPECTATIONS_PROD_STAGE t ) file_format = (type = JSON, STRIP_OUTER_ARRAY = TRUE, compression = Auto) on_error = 'skip_file';

SELECT * FROM LANDING.SNOWPIPE_DEV.CES_GREAT_EXPECTATIONS_DEV_ENCRYPT_TEST ;

DROP TABLE  LANDING.SNOWPIPE_DEV.CES_GREAT_EXPECTATIONS_DEV_ENCRYPT_TEST  ;

--CES_GREAT_EXPECTATIONS_PROD_PIPE

desc pipe CES_GREAT_EXPECTATIONS_PROD_PIPE ;




copy into LANDING.SNOWPIPE_PROD.CES_GREAT_EXPECTATIONS_PROD(FILE_NAME, FILE_ROW_NUMBER, LANDED_DATETIME, MESSAGE) 
FROM (SELECT METADATA$FILENAME, METADATA$FILE_ROW_NUMBER, current_timestamp()::timestamp, t.$1::VARIANT 
FROM @LANDING.SNOWPIPE_PROD.CES_GREAT_EXPECTATIONS_PROD_STAGE t ) file_format = (type = JSON, STRIP_OUTER_ARRAY = TRUE, compression = Auto) on_error = 'skip_file'



-- DROP STORAGE_INTEGRATION ENCRYPTION_INTEGRATION_TEST ;
-- DROP STAGE LANDING.SNOWPIPE_DEV.CES_AZ_ENCRYPTION_CSV_TEST;
-- DROP STAGE LANDING.SNOWPIPE_DEV.CES_AZ_ENCRYPTION_JSON_TEST;
-- DROP FILE FORMAT  LANDING.SNOWPIPE_DEV.CSV_FORMAT;
-- DROP FILE FORMAT LANDING.SNOWPIPE_DEV.JSON_FORMAT;
-- DROP TABLE LANDING.SNOWPIPE_DEV.ENCRYPTION_CSV;
-- DROP TABLE LANDING.SNOWPIPE_DEV.ENCRYPTION_JSON;
-- DROP NOTIFICATION integration encryption_test_notification;
-- DROP NOTIFICATION INTEGRATION encryption_test_notification_json;
-- DROP PIPE ENCRYPTION_CSV_TEST;
-- DROP PIPE ENCRYPTION_JSON_TEST;

